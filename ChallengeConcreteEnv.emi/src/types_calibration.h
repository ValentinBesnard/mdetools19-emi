#ifndef MODELS_MODEL_TYPES_H
#define MODELS_MODEL_TYPES_H
/**
 * @file types_calibration.h
 *
 * Define all data types according to the model size.
 *
 * This file is automatically generated by the uml-serializer-c tool.
 * Do not modify manually.
 *
 * @author Valentin Besnard (valentin.besnard@eseo.fr)
 * @author Matthias Brun (matthias.brun@eseo.fr)
 */

#include <stdint.h>

/**
 * Types for the metamodel.
 */
typedef uint8_t  NbOwnedAttributes_t;	// Number of ownedAttributes per class
typedef uint8_t  NbLanguages_t;			// Number of languages in OpaqueBehaviors or OpaqueExpressions
typedef uint8_t  NbBodies_t;			// Number of bodies in OpaqueBehaviors or OpaqueExpressions
typedef uint8_t  NbPrimitiveTypeProperties_t;	// Number of primitives type properties per class
typedef uint8_t  NbRegions_t;			// Number of regions per state machine
typedef uint8_t  NbTransitions_t;		// Number of transitions per state machine
typedef uint8_t  NbOutgoingTransitions_t;		// Number of outgoing transitions per state
typedef uint8_t  NbTriggers_t;			// Number of triggers per transition
typedef int8_t   NbStates_t;			// Number of states per state machine (signed to handle errors with -1 as error code)
typedef uint8_t  NbEnumerationLiteral_t; // Number of EnumerationLiterals in an Enumeration
typedef uint8_t  NbSignalEvents_t;		// Number of signal events (+1 in order to reserve the maximum value for 'no signal event')
typedef uint8_t  NbInterfaceRealizations_t;			// Number of interface realizations
typedef uint8_t  NbReceptions_t;			// Number of receptions per class or interface
typedef uint8_t  NbConnectorEnds_t;	// Number of connector ends per connector or property
typedef uint8_t  NbPorts_t;				// Number of ports (+1 in order to reserve the maximum value for 'no port')

/**
 * Macros for the interpreter.
 */
#define MAX_FIREABLE_LENGTH		(2)			// Maximum number of transitions in a compound transition of the model.
#define MAX_OUTGOINGS			(9)			// Maximum number of outgoings transitions of a vertex.

/**
 * Types for the interpreter.
 */
typedef int8_t   NbActiveObjects_t;		// Number of active objects (signed because NO_OBJECT_ID takes value -1)
typedef uint8_t  NbPassiveObjects_t;		// Number of passive objects
typedef uint8_t  NbObjects_t;		// Number of objects
typedef	uint32_t NbExecutionSteps_t;	// Number of execution steps (limit)
typedef	uint16_t NbFireablesSum_t;		// Number of fireable transitions in a configuration
typedef	int8_t   NbFireables_t;				// Number of fireable transitions per active object (signed because NO_TRANSITION_ID, INITIAL_TRANSITION_ID, and IMPLICIT_TRANSITION_ID take negative values)
typedef	int8_t   NbOutgoings_t;			// Number of outgoing transitions in the current state
typedef	int8_t   FireablesLength_t;		// Length of fireable transitions (i.e., maximum number of atomic transitions in a compound transition) (value -1 is used for the stack_index)
typedef uint16_t StoreSize_t;			// Size of the store
typedef uint8_t  NbJunctions_t; 	// Number of junction pseudostates per active object.
typedef uint8_t  NbPropertiesRO_t; 	// Number of read-only properties per object.
typedef uint8_t  NbFifoLayers_t; 	// Number of layers per fifo.
typedef uint8_t  NbFifoElements_t; 	// Number of elements per fifo.
typedef uint8_t  ObjectMultiplicity_t; 	// Multiplicity of a part.

/**
 * Types for event pools.
 */
typedef uint8_t  NbEvents_t;			// Number of events on event pool
typedef uint8_t  EventSetSize_t;		// Size of the event set (= Number of receptions)

/**
 * Types for the checker.
 */
typedef int8_t   NbAtoms_t;		// Number of atoms that can be checked (signed to handle errors with -1 as error code)
typedef uint16_t AtomSize_t;	// Size of an atom

/**
 * Types for the pilot.
 */
typedef uint8_t  NbCommands_t;			// Number of commands
typedef uint16_t CommandSize_t;			// Size of a command

#endif /* MODELS_MODEL_TYPES_H */
