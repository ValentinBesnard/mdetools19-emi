#ifndef MODEL_H
#define MODEL_H
/**
 * @file model.h
 *
 * Define the UML model to interpret.
 *
 * This file is automatically generated by the uml-serializer-c tool.
 * Do not modify manually.
 *
 * @author Matthias Brun (matthias.brun@eseo.fr)
 * @author Valentin Besnard (valentin.besnard@eseo.fr)
 */

#include "types_calibration.h"
//#include "interpreter/interpreter.h"
#include "interpreter/active_object.h"
#include "interpreter/passive_object.h"

/**
 * Number of observers in the model (observers that are active objects).
 */
#define NB_OBSERVERS (1)


/**
 * Typedef for events parameters.
 */
typedef struct connected_signal_parameters connected_signal_parameters;
typedef struct goPos_signal_parameters goPos_signal_parameters;
typedef struct goAngle_signal_parameters goAngle_signal_parameters;
typedef struct finish_signal_parameters finish_signal_parameters;
typedef struct error_signal_parameters error_signal_parameters;
typedef struct moveForward_signal_parameters moveForward_signal_parameters;
typedef struct moveRight_signal_parameters moveRight_signal_parameters;
typedef struct spin_signal_parameters spin_signal_parameters;
typedef struct stop_signal_parameters stop_signal_parameters;
typedef struct setSuction_signal_parameters setSuction_signal_parameters;
typedef struct getSuction_signal_parameters getSuction_signal_parameters;
typedef struct getPlayerGPS_signal_parameters getPlayerGPS_signal_parameters;
typedef struct getBallGPS_signal_parameters getBallGPS_signal_parameters;
typedef struct getCompass_signal_parameters getCompass_signal_parameters;
typedef struct rspPlayerGPS_signal_parameters rspPlayerGPS_signal_parameters;
typedef struct rspBallGPS_signal_parameters rspBallGPS_signal_parameters;
typedef struct rspSuction_signal_parameters rspSuction_signal_parameters;
typedef struct rspCompass_signal_parameters rspCompass_signal_parameters;
typedef struct playerConnected_signal_parameters playerConnected_signal_parameters;
typedef struct refereeConnected_signal_parameters refereeConnected_signal_parameters;
typedef struct possession_signal_parameters possession_signal_parameters;
typedef struct abort_signal_parameters abort_signal_parameters;
typedef struct done_signal_parameters done_signal_parameters;
typedef struct opponentScored_signal_parameters opponentScored_signal_parameters;
typedef struct timeout_signal_parameters timeout_signal_parameters;
typedef struct refereeAck_signal_parameters refereeAck_signal_parameters;
typedef struct checkReferee_signal_parameters checkReferee_signal_parameters;

/**
 * Typedef for events.
 */
typedef struct TrajectoryManager_events TrajectoryManager_events;
typedef struct CommunicationPlayer_events CommunicationPlayer_events;
#ifdef WITH_OBSERVERS
#endif /* WITH_OBSERVERS */

/**
 * Typedef of store types.
 */
typedef struct Obs_store Obs_store;
typedef struct Obs_od  Obs_od;
typedef struct DirectionObserver_store DirectionObserver_store;
typedef struct DirectionObserver_ep_params DirectionObserver_ep_params;
typedef struct DirectionObserver_od  DirectionObserver_od;
typedef struct System_store System_store;
typedef struct System_od  System_od;
typedef struct ControllerToPlayerPortSys_store ControllerToPlayerPortSys_store;
typedef struct ControllerToPlayerPortSys_od  ControllerToPlayerPortSys_od;
typedef struct ControllerToRefereePortSys_store ControllerToRefereePortSys_store;
typedef struct ControllerToRefereePortSys_od  ControllerToRefereePortSys_od;
typedef struct TrajToPlayerPortSys_store TrajToPlayerPortSys_store;
typedef struct TrajToPlayerPortSys_od  TrajToPlayerPortSys_od;
typedef struct TrajToRefereePortSys_store TrajToRefereePortSys_store;
typedef struct TrajToRefereePortSys_od  TrajToRefereePortSys_od;
typedef struct Controller_store Controller_store;
typedef struct Controller_ep_params Controller_ep_params;
typedef struct Controller_od  Controller_od;
typedef struct TrajectoryManager_store TrajectoryManager_store;
typedef struct TrajectoryManager_ep_params TrajectoryManager_ep_params;
typedef struct TrajectoryManager_od  TrajectoryManager_od;
typedef struct Main_store Main_store;
typedef struct Main_od  Main_od;
typedef struct Environment_store Environment_store;
typedef struct Environment_od  Environment_od;
typedef struct ControllerToPlayerPortEnv_store ControllerToPlayerPortEnv_store;
typedef struct ControllerToPlayerPortEnv_od  ControllerToPlayerPortEnv_od;
typedef struct ControllerToRefereePortEnv_store ControllerToRefereePortEnv_store;
typedef struct ControllerToRefereePortEnv_od  ControllerToRefereePortEnv_od;
typedef struct TrajToPlayerPortEnv_store TrajToPlayerPortEnv_store;
typedef struct TrajToPlayerPortEnv_od  TrajToPlayerPortEnv_od;
typedef struct TrajToRefereePortEnv_store TrajToRefereePortEnv_store;
typedef struct TrajToRefereePortEnv_od  TrajToRefereePortEnv_od;
typedef struct CommunicationPlayer_store CommunicationPlayer_store;
typedef struct CommunicationPlayer_ep_params CommunicationPlayer_ep_params;
typedef struct CommunicationPlayer_od  CommunicationPlayer_od;
typedef struct CommunicationReferee_store CommunicationReferee_store;
typedef struct CommunicationReferee_ep_params CommunicationReferee_ep_params;
typedef struct CommunicationReferee_od  CommunicationReferee_od;
typedef struct TrajFromPlayerProvider_store TrajFromPlayerProvider_store;
typedef struct TrajFromPlayerProvider_od  TrajFromPlayerProvider_od;
typedef struct TrajFromPlayerUser_store TrajFromPlayerUser_store;
typedef struct TrajFromPlayerUser_od  TrajFromPlayerUser_od;
typedef struct TrajFromRefereeProvider_store TrajFromRefereeProvider_store;
typedef struct TrajFromRefereeProvider_od  TrajFromRefereeProvider_od;
typedef struct TrajFromRefereeUser_store TrajFromRefereeUser_store;
typedef struct TrajFromRefereeUser_od  TrajFromRefereeUser_od;
typedef struct TrajToPlayerProvider_store TrajToPlayerProvider_store;
typedef struct TrajToPlayerProvider_od  TrajToPlayerProvider_od;
typedef struct TrajToPlayerUser_store TrajToPlayerUser_store;
typedef struct TrajToPlayerUser_od  TrajToPlayerUser_od;
typedef struct TrajToRefereeProvider_store TrajToRefereeProvider_store;
typedef struct TrajToRefereeProvider_od  TrajToRefereeProvider_od;
typedef struct TrajToRefereeUser_store TrajToRefereeUser_store;
typedef struct TrajToRefereeUser_od  TrajToRefereeUser_od;
typedef struct ControllerFromRefereeProvider_store ControllerFromRefereeProvider_store;
typedef struct ControllerFromRefereeProvider_od  ControllerFromRefereeProvider_od;
typedef struct ControllerFromRefereeUser_store ControllerFromRefereeUser_store;
typedef struct ControllerFromRefereeUser_od  ControllerFromRefereeUser_od;
typedef struct RefereeUser_store RefereeUser_store;
typedef struct RefereeUser_od  RefereeUser_od;
typedef struct PlayerUser_store PlayerUser_store;
typedef struct PlayerUser_od  PlayerUser_od;
typedef struct TrajUser_store TrajUser_store;
typedef struct TrajUser_od  TrajUser_od;
/**
 * Typedef of the Store type.
 */
typedef struct Store Store;

/**
 * Typedef for signal events.
 */
typedef struct SignalEvents SignalEvents;


/**
 * Typedef of read-only properties types for classes.
 */
typedef struct TrajToRefereePortEnv_properties_ro TrajToRefereePortEnv_properties_ro;
typedef struct ControllerToPlayerPortSys_properties_ro ControllerToPlayerPortSys_properties_ro;
typedef struct ControllerFromRefereeUser_properties_ro ControllerFromRefereeUser_properties_ro;
typedef struct TrajToPlayerPortSys_properties_ro TrajToPlayerPortSys_properties_ro;
typedef struct Main_properties_ro Main_properties_ro;
typedef struct Obs_properties_ro Obs_properties_ro;
typedef struct TrajToRefereeProvider_properties_ro TrajToRefereeProvider_properties_ro;
typedef struct Controller_properties_ro Controller_properties_ro;
typedef struct TrajectoryManager_properties_ro TrajectoryManager_properties_ro;
typedef struct DirectionObserver_properties_ro DirectionObserver_properties_ro;
typedef struct TrajFromPlayerProvider_properties_ro TrajFromPlayerProvider_properties_ro;
typedef struct ControllerFromRefereeProvider_properties_ro ControllerFromRefereeProvider_properties_ro;
typedef struct TrajToPlayerUser_properties_ro TrajToPlayerUser_properties_ro;
typedef struct TrajUser_properties_ro TrajUser_properties_ro;
typedef struct ControllerToRefereePortEnv_properties_ro ControllerToRefereePortEnv_properties_ro;
typedef struct TrajToRefereeUser_properties_ro TrajToRefereeUser_properties_ro;
typedef struct RefereeUser_properties_ro RefereeUser_properties_ro;
typedef struct ControllerToRefereePortSys_properties_ro ControllerToRefereePortSys_properties_ro;
typedef struct TrajToPlayerPortEnv_properties_ro TrajToPlayerPortEnv_properties_ro;
typedef struct TrajFromPlayerUser_properties_ro TrajFromPlayerUser_properties_ro;
typedef struct TrajFromRefereeUser_properties_ro TrajFromRefereeUser_properties_ro;
typedef struct ControllerToPlayerPortEnv_properties_ro ControllerToPlayerPortEnv_properties_ro;
typedef struct PlayerUser_properties_ro PlayerUser_properties_ro;
typedef struct CommunicationPlayer_properties_ro CommunicationPlayer_properties_ro;
typedef struct TrajToRefereePortSys_properties_ro TrajToRefereePortSys_properties_ro;
typedef struct TrajToPlayerProvider_properties_ro TrajToPlayerProvider_properties_ro;
typedef struct Environment_properties_ro Environment_properties_ro;
typedef struct System_properties_ro System_properties_ro;
typedef struct CommunicationReferee_properties_ro CommunicationReferee_properties_ro;
typedef struct TrajFromRefereeProvider_properties_ro TrajFromRefereeProvider_properties_ro;
typedef struct PropertiesRO PropertiesRO;

/**
 * The number of fireable transitions of the system.
 */
#define MAX_FIREABLE_SYSTEM  (20)

/**
 * Typedef for mutability of properties.
 */
typedef struct Obs_mutability Obs_mutability;
typedef struct DirectionObserver_mutability DirectionObserver_mutability;
typedef struct System_mutability System_mutability;
typedef struct ControllerToPlayerPortSys_mutability ControllerToPlayerPortSys_mutability;
typedef struct ControllerToRefereePortSys_mutability ControllerToRefereePortSys_mutability;
typedef struct TrajToPlayerPortSys_mutability TrajToPlayerPortSys_mutability;
typedef struct TrajToRefereePortSys_mutability TrajToRefereePortSys_mutability;
typedef struct Controller_mutability Controller_mutability;
typedef struct TrajectoryManager_mutability TrajectoryManager_mutability;
typedef struct Main_mutability Main_mutability;
typedef struct Environment_mutability Environment_mutability;
typedef struct ControllerToPlayerPortEnv_mutability ControllerToPlayerPortEnv_mutability;
typedef struct ControllerToRefereePortEnv_mutability ControllerToRefereePortEnv_mutability;
typedef struct TrajToPlayerPortEnv_mutability TrajToPlayerPortEnv_mutability;
typedef struct TrajToRefereePortEnv_mutability TrajToRefereePortEnv_mutability;
typedef struct CommunicationPlayer_mutability CommunicationPlayer_mutability;
typedef struct CommunicationReferee_mutability CommunicationReferee_mutability;
typedef struct TrajFromPlayerProvider_mutability TrajFromPlayerProvider_mutability;
typedef struct TrajFromPlayerUser_mutability TrajFromPlayerUser_mutability;
typedef struct TrajFromRefereeProvider_mutability TrajFromRefereeProvider_mutability;
typedef struct TrajFromRefereeUser_mutability TrajFromRefereeUser_mutability;
typedef struct TrajToPlayerProvider_mutability TrajToPlayerProvider_mutability;
typedef struct TrajToPlayerUser_mutability TrajToPlayerUser_mutability;
typedef struct TrajToRefereeProvider_mutability TrajToRefereeProvider_mutability;
typedef struct TrajToRefereeUser_mutability TrajToRefereeUser_mutability;
typedef struct ControllerFromRefereeProvider_mutability ControllerFromRefereeProvider_mutability;
typedef struct ControllerFromRefereeUser_mutability ControllerFromRefereeUser_mutability;
typedef struct RefereeUser_mutability RefereeUser_mutability;
typedef struct PlayerUser_mutability PlayerUser_mutability;
typedef struct TrajUser_mutability TrajUser_mutability;

/**
 * Typedef for properties types.
 */
typedef struct Obs_PropertiesTypes Obs_PropertiesTypes;
typedef struct DirectionObserver_PropertiesTypes DirectionObserver_PropertiesTypes;
typedef struct System_PropertiesTypes System_PropertiesTypes;
typedef struct ControllerToPlayerPortSys_PropertiesTypes ControllerToPlayerPortSys_PropertiesTypes;
typedef struct ControllerToRefereePortSys_PropertiesTypes ControllerToRefereePortSys_PropertiesTypes;
typedef struct TrajToPlayerPortSys_PropertiesTypes TrajToPlayerPortSys_PropertiesTypes;
typedef struct TrajToRefereePortSys_PropertiesTypes TrajToRefereePortSys_PropertiesTypes;
typedef struct Controller_PropertiesTypes Controller_PropertiesTypes;
typedef struct TrajectoryManager_PropertiesTypes TrajectoryManager_PropertiesTypes;
typedef struct Main_PropertiesTypes Main_PropertiesTypes;
typedef struct Environment_PropertiesTypes Environment_PropertiesTypes;
typedef struct ControllerToPlayerPortEnv_PropertiesTypes ControllerToPlayerPortEnv_PropertiesTypes;
typedef struct ControllerToRefereePortEnv_PropertiesTypes ControllerToRefereePortEnv_PropertiesTypes;
typedef struct TrajToPlayerPortEnv_PropertiesTypes TrajToPlayerPortEnv_PropertiesTypes;
typedef struct TrajToRefereePortEnv_PropertiesTypes TrajToRefereePortEnv_PropertiesTypes;
typedef struct CommunicationPlayer_PropertiesTypes CommunicationPlayer_PropertiesTypes;
typedef struct CommunicationReferee_PropertiesTypes CommunicationReferee_PropertiesTypes;
typedef struct TrajFromPlayerProvider_PropertiesTypes TrajFromPlayerProvider_PropertiesTypes;
typedef struct TrajFromPlayerUser_PropertiesTypes TrajFromPlayerUser_PropertiesTypes;
typedef struct TrajFromRefereeProvider_PropertiesTypes TrajFromRefereeProvider_PropertiesTypes;
typedef struct TrajFromRefereeUser_PropertiesTypes TrajFromRefereeUser_PropertiesTypes;
typedef struct TrajToPlayerProvider_PropertiesTypes TrajToPlayerProvider_PropertiesTypes;
typedef struct TrajToPlayerUser_PropertiesTypes TrajToPlayerUser_PropertiesTypes;
typedef struct TrajToRefereeProvider_PropertiesTypes TrajToRefereeProvider_PropertiesTypes;
typedef struct TrajToRefereeUser_PropertiesTypes TrajToRefereeUser_PropertiesTypes;
typedef struct ControllerFromRefereeProvider_PropertiesTypes ControllerFromRefereeProvider_PropertiesTypes;
typedef struct ControllerFromRefereeUser_PropertiesTypes ControllerFromRefereeUser_PropertiesTypes;
typedef struct RefereeUser_PropertiesTypes RefereeUser_PropertiesTypes;
typedef struct PlayerUser_PropertiesTypes PlayerUser_PropertiesTypes;
typedef struct TrajUser_PropertiesTypes TrajUser_PropertiesTypes;

/**
 * Typedef for class information.
 */
typedef struct Obs_classInfo Obs_classInfo;
typedef struct DirectionObserver_classInfo DirectionObserver_classInfo;
typedef struct System_classInfo System_classInfo;
typedef struct ControllerToPlayerPortSys_classInfo ControllerToPlayerPortSys_classInfo;
typedef struct ControllerToRefereePortSys_classInfo ControllerToRefereePortSys_classInfo;
typedef struct TrajToPlayerPortSys_classInfo TrajToPlayerPortSys_classInfo;
typedef struct TrajToRefereePortSys_classInfo TrajToRefereePortSys_classInfo;
typedef struct Controller_classInfo Controller_classInfo;
typedef struct TrajectoryManager_classInfo TrajectoryManager_classInfo;
typedef struct Main_classInfo Main_classInfo;
typedef struct Environment_classInfo Environment_classInfo;
typedef struct ControllerToPlayerPortEnv_classInfo ControllerToPlayerPortEnv_classInfo;
typedef struct ControllerToRefereePortEnv_classInfo ControllerToRefereePortEnv_classInfo;
typedef struct TrajToPlayerPortEnv_classInfo TrajToPlayerPortEnv_classInfo;
typedef struct TrajToRefereePortEnv_classInfo TrajToRefereePortEnv_classInfo;
typedef struct CommunicationPlayer_classInfo CommunicationPlayer_classInfo;
typedef struct CommunicationReferee_classInfo CommunicationReferee_classInfo;
typedef struct TrajFromPlayerProvider_classInfo TrajFromPlayerProvider_classInfo;
typedef struct TrajFromPlayerUser_classInfo TrajFromPlayerUser_classInfo;
typedef struct TrajFromRefereeProvider_classInfo TrajFromRefereeProvider_classInfo;
typedef struct TrajFromRefereeUser_classInfo TrajFromRefereeUser_classInfo;
typedef struct TrajToPlayerProvider_classInfo TrajToPlayerProvider_classInfo;
typedef struct TrajToPlayerUser_classInfo TrajToPlayerUser_classInfo;
typedef struct TrajToRefereeProvider_classInfo TrajToRefereeProvider_classInfo;
typedef struct TrajToRefereeUser_classInfo TrajToRefereeUser_classInfo;
typedef struct ControllerFromRefereeProvider_classInfo ControllerFromRefereeProvider_classInfo;
typedef struct ControllerFromRefereeUser_classInfo ControllerFromRefereeUser_classInfo;
typedef struct RefereeUser_classInfo RefereeUser_classInfo;
typedef struct PlayerUser_classInfo PlayerUser_classInfo;
typedef struct TrajUser_classInfo TrajUser_classInfo;

/**
 * Typedef of active objects types.
 */
SPECIFIC_TYPEDEF_Object(DirectionObserver)
SPECIFIC_TYPEDEF_Object(Controller)
SPECIFIC_TYPEDEF_Object(TrajectoryManager)
SPECIFIC_TYPEDEF_Object(CommunicationPlayer)
SPECIFIC_TYPEDEF_Object(CommunicationReferee)
typedef struct ActiveObjects ActiveObjects;

/**
 * Typedef of passive objects types.
 */
SPECIFIC_TYPEDEF_Object(Obs)
SPECIFIC_TYPEDEF_Object(System)
SPECIFIC_TYPEDEF_Object(ControllerToPlayerPortSys)
SPECIFIC_TYPEDEF_Object(ControllerToRefereePortSys)
SPECIFIC_TYPEDEF_Object(TrajToPlayerPortSys)
SPECIFIC_TYPEDEF_Object(TrajToRefereePortSys)
SPECIFIC_TYPEDEF_Object(Main)
SPECIFIC_TYPEDEF_Object(Environment)
SPECIFIC_TYPEDEF_Object(ControllerToPlayerPortEnv)
SPECIFIC_TYPEDEF_Object(ControllerToRefereePortEnv)
SPECIFIC_TYPEDEF_Object(TrajToPlayerPortEnv)
SPECIFIC_TYPEDEF_Object(TrajToRefereePortEnv)
SPECIFIC_TYPEDEF_Object(TrajFromPlayerProvider)
SPECIFIC_TYPEDEF_Object(TrajFromPlayerUser)
SPECIFIC_TYPEDEF_Object(TrajFromRefereeProvider)
SPECIFIC_TYPEDEF_Object(TrajFromRefereeUser)
SPECIFIC_TYPEDEF_Object(TrajToPlayerProvider)
SPECIFIC_TYPEDEF_Object(TrajToPlayerUser)
SPECIFIC_TYPEDEF_Object(TrajToRefereeProvider)
SPECIFIC_TYPEDEF_Object(TrajToRefereeUser)
SPECIFIC_TYPEDEF_Object(ControllerFromRefereeProvider)
SPECIFIC_TYPEDEF_Object(ControllerFromRefereeUser)
SPECIFIC_TYPEDEF_Object(RefereeUser)
SPECIFIC_TYPEDEF_Object(PlayerUser)
SPECIFIC_TYPEDEF_Object(TrajUser)
typedef struct PassiveObjects PassiveObjects;

/**
 * Typedef for operations type.
 */
typedef struct TrajToRefereePortEnv_operations TrajToRefereePortEnv_operations;
typedef void (*TrajToRefereePortEnv_method)(TrajToRefereePortEnv_Object * this, void * __unused_params);

typedef struct ControllerToPlayerPortSys_operations ControllerToPlayerPortSys_operations;
typedef void (*ControllerToPlayerPortSys_method)(ControllerToPlayerPortSys_Object * this, void * __unused_params);

typedef struct TrajToPlayerPortSys_operations TrajToPlayerPortSys_operations;
typedef void (*TrajToPlayerPortSys_method)(TrajToPlayerPortSys_Object * this, void * __unused_params);

typedef struct ControllerFromRefereeUser_operations ControllerFromRefereeUser_operations;
typedef void (*ControllerFromRefereeUser_method)(ControllerFromRefereeUser_Object * this, void * __unused_params);

typedef struct Main_operations Main_operations;
typedef void (*Main_method)(Main_Object * this, void * __unused_params);

typedef struct Obs_operations Obs_operations;
typedef void (*Obs_method)(Obs_Object * this, void * __unused_params);

typedef struct TrajToRefereeProvider_operations TrajToRefereeProvider_operations;
typedef void (*TrajToRefereeProvider_method)(TrajToRefereeProvider_Object * this, void * __unused_params);

typedef struct Controller_operations Controller_operations;
typedef void (*Controller_method)(Controller_Object * this, void * __unused_params);

typedef struct TrajectoryManager_operations TrajectoryManager_operations;
typedef void (*TrajectoryManager_method)(TrajectoryManager_Object * this, void * __unused_params);

typedef struct DirectionObserver_operations DirectionObserver_operations;
typedef void (*DirectionObserver_method)(DirectionObserver_Object * this, void * __unused_params);

typedef struct TrajFromPlayerProvider_operations TrajFromPlayerProvider_operations;
typedef void (*TrajFromPlayerProvider_method)(TrajFromPlayerProvider_Object * this, void * __unused_params);

typedef struct ControllerFromRefereeProvider_operations ControllerFromRefereeProvider_operations;
typedef void (*ControllerFromRefereeProvider_method)(ControllerFromRefereeProvider_Object * this, void * __unused_params);

typedef struct TrajToPlayerUser_operations TrajToPlayerUser_operations;
typedef void (*TrajToPlayerUser_method)(TrajToPlayerUser_Object * this, void * __unused_params);

typedef struct TrajUser_operations TrajUser_operations;
typedef void (*TrajUser_method)(TrajUser_Object * this, void * __unused_params);

typedef struct ControllerToRefereePortEnv_operations ControllerToRefereePortEnv_operations;
typedef void (*ControllerToRefereePortEnv_method)(ControllerToRefereePortEnv_Object * this, void * __unused_params);

typedef struct TrajToRefereeUser_operations TrajToRefereeUser_operations;
typedef void (*TrajToRefereeUser_method)(TrajToRefereeUser_Object * this, void * __unused_params);

typedef struct ControllerToRefereePortSys_operations ControllerToRefereePortSys_operations;
typedef void (*ControllerToRefereePortSys_method)(ControllerToRefereePortSys_Object * this, void * __unused_params);

typedef struct RefereeUser_operations RefereeUser_operations;
typedef void (*RefereeUser_method)(RefereeUser_Object * this, void * __unused_params);

typedef struct TrajToPlayerPortEnv_operations TrajToPlayerPortEnv_operations;
typedef void (*TrajToPlayerPortEnv_method)(TrajToPlayerPortEnv_Object * this, void * __unused_params);

typedef struct TrajFromPlayerUser_operations TrajFromPlayerUser_operations;
typedef void (*TrajFromPlayerUser_method)(TrajFromPlayerUser_Object * this, void * __unused_params);

typedef struct TrajFromRefereeUser_operations TrajFromRefereeUser_operations;
typedef void (*TrajFromRefereeUser_method)(TrajFromRefereeUser_Object * this, void * __unused_params);

typedef struct ControllerToPlayerPortEnv_operations ControllerToPlayerPortEnv_operations;
typedef void (*ControllerToPlayerPortEnv_method)(ControllerToPlayerPortEnv_Object * this, void * __unused_params);

typedef struct PlayerUser_operations PlayerUser_operations;
typedef void (*PlayerUser_method)(PlayerUser_Object * this, void * __unused_params);

typedef struct CommunicationPlayer_operations CommunicationPlayer_operations;
typedef void (*CommunicationPlayer_method)(CommunicationPlayer_Object * this, void * __unused_params);

typedef struct TrajToRefereePortSys_operations TrajToRefereePortSys_operations;
typedef void (*TrajToRefereePortSys_method)(TrajToRefereePortSys_Object * this, void * __unused_params);

typedef struct TrajToPlayerProvider_operations TrajToPlayerProvider_operations;
typedef void (*TrajToPlayerProvider_method)(TrajToPlayerProvider_Object * this, void * __unused_params);

typedef struct Environment_operations Environment_operations;
typedef void (*Environment_method)(Environment_Object * this, void * __unused_params);

typedef struct System_operations System_operations;
typedef void (*System_method)(System_Object * this, void * __unused_params);

typedef struct CommunicationReferee_operations CommunicationReferee_operations;
typedef void (*CommunicationReferee_method)(CommunicationReferee_Object * this, void * __unused_params);

typedef struct TrajFromRefereeProvider_operations TrajFromRefereeProvider_operations;
typedef void (*TrajFromRefereeProvider_method)(TrajFromRefereeProvider_Object * this, void * __unused_params);

/**
 * Typedef for ports.
 */
typedef struct Ports Ports;




#define NB_MODEL_PARTS	(4)
extern C_UML_Model * model_to_interpret[NB_MODEL_PARTS];

/**
 * Declarations of types for events parameters.
 */
/**
 * Type connected_signal_parameters corresponding to parameters of the event connected.
 */
struct connected_signal_parameters {
};
/**
 * Type goPos_signal_parameters corresponding to parameters of the event goPos.
 */
struct goPos_signal_parameters {
	int8_t ball;
	int32_t x;
	int32_t z;
};
/**
 * Type goAngle_signal_parameters corresponding to parameters of the event goAngle.
 */
struct goAngle_signal_parameters {
	int8_t ball;
	int32_t x;
	int32_t z;
};
/**
 * Type finish_signal_parameters corresponding to parameters of the event finish.
 */
struct finish_signal_parameters {
};
/**
 * Type error_signal_parameters corresponding to parameters of the event error.
 */
struct error_signal_parameters {
};
/**
 * Type moveForward_signal_parameters corresponding to parameters of the event moveForward.
 */
struct moveForward_signal_parameters {
	int32_t speed;
};
/**
 * Type moveRight_signal_parameters corresponding to parameters of the event moveRight.
 */
struct moveRight_signal_parameters {
	int32_t speed;
};
/**
 * Type spin_signal_parameters corresponding to parameters of the event spin.
 */
struct spin_signal_parameters {
	int32_t speed;
	int8_t stopAfter;
};
/**
 * Type stop_signal_parameters corresponding to parameters of the event stop.
 */
struct stop_signal_parameters {
};
/**
 * Type setSuction_signal_parameters corresponding to parameters of the event setSuction.
 */
struct setSuction_signal_parameters {
	int32_t power;
};
/**
 * Type getSuction_signal_parameters corresponding to parameters of the event getSuction.
 */
struct getSuction_signal_parameters {
};
/**
 * Type getPlayerGPS_signal_parameters corresponding to parameters of the event getPlayerGPS.
 */
struct getPlayerGPS_signal_parameters {
};
/**
 * Type getBallGPS_signal_parameters corresponding to parameters of the event getBallGPS.
 */
struct getBallGPS_signal_parameters {
};
/**
 * Type getCompass_signal_parameters corresponding to parameters of the event getCompass.
 */
struct getCompass_signal_parameters {
};
/**
 * Type rspPlayerGPS_signal_parameters corresponding to parameters of the event rspPlayerGPS.
 */
struct rspPlayerGPS_signal_parameters {
	int32_t x;
	int32_t z;
};
/**
 * Type rspBallGPS_signal_parameters corresponding to parameters of the event rspBallGPS.
 */
struct rspBallGPS_signal_parameters {
	int32_t x;
	int32_t z;
};
/**
 * Type rspSuction_signal_parameters corresponding to parameters of the event rspSuction.
 */
struct rspSuction_signal_parameters {
	int32_t power;
};
/**
 * Type rspCompass_signal_parameters corresponding to parameters of the event rspCompass.
 */
struct rspCompass_signal_parameters {
	int32_t direction;
};
/**
 * Type playerConnected_signal_parameters corresponding to parameters of the event playerConnected.
 */
struct playerConnected_signal_parameters {
};
/**
 * Type refereeConnected_signal_parameters corresponding to parameters of the event refereeConnected.
 */
struct refereeConnected_signal_parameters {
};
/**
 * Type possession_signal_parameters corresponding to parameters of the event possession.
 */
struct possession_signal_parameters {
};
/**
 * Type abort_signal_parameters corresponding to parameters of the event abort.
 */
struct abort_signal_parameters {
};
/**
 * Type done_signal_parameters corresponding to parameters of the event done.
 */
struct done_signal_parameters {
};
/**
 * Type opponentScored_signal_parameters corresponding to parameters of the event opponentScored.
 */
struct opponentScored_signal_parameters {
};
/**
 * Type timeout_signal_parameters corresponding to parameters of the event timeout.
 */
struct timeout_signal_parameters {
};
/**
 * Type refereeAck_signal_parameters corresponding to parameters of the event refereeAck.
 */
struct refereeAck_signal_parameters {
};
/**
 * Type checkReferee_signal_parameters corresponding to parameters of the event checkReferee.
 */
struct checkReferee_signal_parameters {
};

/**
 * Declarations of types for events.
 */
/**
 * Type TrajectoryManager_events corresponding to an event of the event pool.
 */
struct TrajectoryManager_events {
	union {
		goPos_signal_parameters goPos_params;
		goAngle_signal_parameters goAngle_params;
		rspPlayerGPS_signal_parameters rspPlayerGPS_params;
		rspBallGPS_signal_parameters rspBallGPS_params;
		rspCompass_signal_parameters rspCompass_params;
	};
};
/**
 * Type CommunicationPlayer_events corresponding to an event of the event pool.
 */
struct CommunicationPlayer_events {
	union {
		moveForward_signal_parameters moveForward_params;
		moveRight_signal_parameters moveRight_params;
		spin_signal_parameters spin_params;
		setSuction_signal_parameters setSuction_params;
	};
};
#ifdef WITH_OBSERVERS
#endif /* WITH_OBSERVERS */

/**
 * Declaration of store types.
 */
/**
 * The object data (e.g., attributes) type for the Obs class.
 */
struct Obs_od {
};
/**
 * The store type for the Obs class. It contains:
 * 		 - value of its current state
 * 		 - content of its event pool
 * 		 - values of its attributes
 */
struct Obs_store {
};
/**
 * The object data (e.g., attributes) type for the DirectionObserver class.
 */
struct DirectionObserver_od {
};
/**
 * The store type for the DirectionObserver class. It contains:
 * 		 - value of its current state
 * 		 - content of its event pool
 * 		 - values of its attributes
 */
struct DirectionObserver_store {
	uint32_t cs;
	EventPoolStore ep;
};
/**
 * The object data (e.g., attributes) type for the System class.
 */
struct System_od {
};
/**
 * The store type for the System class. It contains:
 * 		 - value of its current state
 * 		 - content of its event pool
 * 		 - values of its attributes
 */
struct System_store {
};
/**
 * The object data (e.g., attributes) type for the ControllerToPlayerPortSys class.
 */
struct ControllerToPlayerPortSys_od {
};
/**
 * The store type for the ControllerToPlayerPortSys class. It contains:
 * 		 - value of its current state
 * 		 - content of its event pool
 * 		 - values of its attributes
 */
struct ControllerToPlayerPortSys_store {
};
/**
 * The object data (e.g., attributes) type for the ControllerToRefereePortSys class.
 */
struct ControllerToRefereePortSys_od {
};
/**
 * The store type for the ControllerToRefereePortSys class. It contains:
 * 		 - value of its current state
 * 		 - content of its event pool
 * 		 - values of its attributes
 */
struct ControllerToRefereePortSys_store {
};
/**
 * The object data (e.g., attributes) type for the TrajToPlayerPortSys class.
 */
struct TrajToPlayerPortSys_od {
};
/**
 * The store type for the TrajToPlayerPortSys class. It contains:
 * 		 - value of its current state
 * 		 - content of its event pool
 * 		 - values of its attributes
 */
struct TrajToPlayerPortSys_store {
};
/**
 * The object data (e.g., attributes) type for the TrajToRefereePortSys class.
 */
struct TrajToRefereePortSys_od {
};
/**
 * The store type for the TrajToRefereePortSys class. It contains:
 * 		 - value of its current state
 * 		 - content of its event pool
 * 		 - values of its attributes
 */
struct TrajToRefereePortSys_store {
};
/**
 * The object data (e.g., attributes) type for the Controller class.
 */
struct Controller_od {
};
/**
 * The store type for the Controller class. It contains:
 * 		 - value of its current state
 * 		 - content of its event pool
 * 		 - values of its attributes
 */
struct Controller_store {
	uint32_t cs;
	EventPoolStore ep;
};
/**
 * The event pool parameters type for the TrajectoryManager class.
 */
struct TrajectoryManager_ep_params {
	TrajectoryManager_events eventOccurred[EVENT_POOL_SIZE];
};
/**
 * The object data (e.g., attributes) type for the TrajectoryManager class.
 */
struct TrajectoryManager_od {
	int32_t xPlayer;
	int32_t zPlayer;
	int32_t aPlayer;
	int32_t xBall;
	int32_t zBall;
	int8_t xArrived;
	int8_t zArrived;
	int8_t aArrived;
	int32_t trajectory;
	int32_t xTarget;
	int32_t zTarget;
	int8_t ballTarget;
	int8_t receivedBall;
	int8_t receivedPlayer;
	int8_t receivedCompass;
	int8_t needTurn;
	int8_t ballInRobot;
	int8_t playerConnected;
	int8_t refereeConnected;
	int8_t error;
	int8_t ack;
	int32_t kp;
};
/**
 * The store type for the TrajectoryManager class. It contains:
 * 		 - value of its current state
 * 		 - content of its event pool
 * 		 - values of its attributes
 */
struct TrajectoryManager_store {
	uint32_t cs;
	EventPoolStore ep;
	TrajectoryManager_ep_params ep_params;
	TrajectoryManager_od od;
};
/**
 * The object data (e.g., attributes) type for the Main class.
 */
struct Main_od {
};
/**
 * The store type for the Main class. It contains:
 * 		 - value of its current state
 * 		 - content of its event pool
 * 		 - values of its attributes
 */
struct Main_store {
};
/**
 * The object data (e.g., attributes) type for the Environment class.
 */
struct Environment_od {
};
/**
 * The store type for the Environment class. It contains:
 * 		 - value of its current state
 * 		 - content of its event pool
 * 		 - values of its attributes
 */
struct Environment_store {
};
/**
 * The object data (e.g., attributes) type for the ControllerToPlayerPortEnv class.
 */
struct ControllerToPlayerPortEnv_od {
};
/**
 * The store type for the ControllerToPlayerPortEnv class. It contains:
 * 		 - value of its current state
 * 		 - content of its event pool
 * 		 - values of its attributes
 */
struct ControllerToPlayerPortEnv_store {
};
/**
 * The object data (e.g., attributes) type for the ControllerToRefereePortEnv class.
 */
struct ControllerToRefereePortEnv_od {
};
/**
 * The store type for the ControllerToRefereePortEnv class. It contains:
 * 		 - value of its current state
 * 		 - content of its event pool
 * 		 - values of its attributes
 */
struct ControllerToRefereePortEnv_store {
};
/**
 * The object data (e.g., attributes) type for the TrajToPlayerPortEnv class.
 */
struct TrajToPlayerPortEnv_od {
};
/**
 * The store type for the TrajToPlayerPortEnv class. It contains:
 * 		 - value of its current state
 * 		 - content of its event pool
 * 		 - values of its attributes
 */
struct TrajToPlayerPortEnv_store {
};
/**
 * The object data (e.g., attributes) type for the TrajToRefereePortEnv class.
 */
struct TrajToRefereePortEnv_od {
};
/**
 * The store type for the TrajToRefereePortEnv class. It contains:
 * 		 - value of its current state
 * 		 - content of its event pool
 * 		 - values of its attributes
 */
struct TrajToRefereePortEnv_store {
};
/**
 * The event pool parameters type for the CommunicationPlayer class.
 */
struct CommunicationPlayer_ep_params {
	CommunicationPlayer_events eventOccurred[EVENT_POOL_SIZE];
};
/**
 * The object data (e.g., attributes) type for the CommunicationPlayer class.
 */
struct CommunicationPlayer_od {
	int32_t tcpPort;
	int32_t connected;
	int32_t status;
};
/**
 * The store type for the CommunicationPlayer class. It contains:
 * 		 - value of its current state
 * 		 - content of its event pool
 * 		 - values of its attributes
 */
struct CommunicationPlayer_store {
	uint32_t cs;
	EventPoolStore ep;
	CommunicationPlayer_ep_params ep_params;
	CommunicationPlayer_od od;
};
/**
 * The object data (e.g., attributes) type for the CommunicationReferee class.
 */
struct CommunicationReferee_od {
	int32_t tcpPort;
	int32_t connected;
	int32_t status;
};
/**
 * The store type for the CommunicationReferee class. It contains:
 * 		 - value of its current state
 * 		 - content of its event pool
 * 		 - values of its attributes
 */
struct CommunicationReferee_store {
	uint32_t cs;
	EventPoolStore ep;
	CommunicationReferee_od od;
};
/**
 * The object data (e.g., attributes) type for the TrajFromPlayerProvider class.
 */
struct TrajFromPlayerProvider_od {
};
/**
 * The store type for the TrajFromPlayerProvider class. It contains:
 * 		 - value of its current state
 * 		 - content of its event pool
 * 		 - values of its attributes
 */
struct TrajFromPlayerProvider_store {
};
/**
 * The object data (e.g., attributes) type for the TrajFromPlayerUser class.
 */
struct TrajFromPlayerUser_od {
};
/**
 * The store type for the TrajFromPlayerUser class. It contains:
 * 		 - value of its current state
 * 		 - content of its event pool
 * 		 - values of its attributes
 */
struct TrajFromPlayerUser_store {
};
/**
 * The object data (e.g., attributes) type for the TrajFromRefereeProvider class.
 */
struct TrajFromRefereeProvider_od {
};
/**
 * The store type for the TrajFromRefereeProvider class. It contains:
 * 		 - value of its current state
 * 		 - content of its event pool
 * 		 - values of its attributes
 */
struct TrajFromRefereeProvider_store {
};
/**
 * The object data (e.g., attributes) type for the TrajFromRefereeUser class.
 */
struct TrajFromRefereeUser_od {
};
/**
 * The store type for the TrajFromRefereeUser class. It contains:
 * 		 - value of its current state
 * 		 - content of its event pool
 * 		 - values of its attributes
 */
struct TrajFromRefereeUser_store {
};
/**
 * The object data (e.g., attributes) type for the TrajToPlayerProvider class.
 */
struct TrajToPlayerProvider_od {
};
/**
 * The store type for the TrajToPlayerProvider class. It contains:
 * 		 - value of its current state
 * 		 - content of its event pool
 * 		 - values of its attributes
 */
struct TrajToPlayerProvider_store {
};
/**
 * The object data (e.g., attributes) type for the TrajToPlayerUser class.
 */
struct TrajToPlayerUser_od {
};
/**
 * The store type for the TrajToPlayerUser class. It contains:
 * 		 - value of its current state
 * 		 - content of its event pool
 * 		 - values of its attributes
 */
struct TrajToPlayerUser_store {
};
/**
 * The object data (e.g., attributes) type for the TrajToRefereeProvider class.
 */
struct TrajToRefereeProvider_od {
};
/**
 * The store type for the TrajToRefereeProvider class. It contains:
 * 		 - value of its current state
 * 		 - content of its event pool
 * 		 - values of its attributes
 */
struct TrajToRefereeProvider_store {
};
/**
 * The object data (e.g., attributes) type for the TrajToRefereeUser class.
 */
struct TrajToRefereeUser_od {
};
/**
 * The store type for the TrajToRefereeUser class. It contains:
 * 		 - value of its current state
 * 		 - content of its event pool
 * 		 - values of its attributes
 */
struct TrajToRefereeUser_store {
};
/**
 * The object data (e.g., attributes) type for the ControllerFromRefereeProvider class.
 */
struct ControllerFromRefereeProvider_od {
};
/**
 * The store type for the ControllerFromRefereeProvider class. It contains:
 * 		 - value of its current state
 * 		 - content of its event pool
 * 		 - values of its attributes
 */
struct ControllerFromRefereeProvider_store {
};
/**
 * The object data (e.g., attributes) type for the ControllerFromRefereeUser class.
 */
struct ControllerFromRefereeUser_od {
};
/**
 * The store type for the ControllerFromRefereeUser class. It contains:
 * 		 - value of its current state
 * 		 - content of its event pool
 * 		 - values of its attributes
 */
struct ControllerFromRefereeUser_store {
};
/**
 * The object data (e.g., attributes) type for the RefereeUser class.
 */
struct RefereeUser_od {
};
/**
 * The store type for the RefereeUser class. It contains:
 * 		 - value of its current state
 * 		 - content of its event pool
 * 		 - values of its attributes
 */
struct RefereeUser_store {
};
/**
 * The object data (e.g., attributes) type for the PlayerUser class.
 */
struct PlayerUser_od {
};
/**
 * The store type for the PlayerUser class. It contains:
 * 		 - value of its current state
 * 		 - content of its event pool
 * 		 - values of its attributes
 */
struct PlayerUser_store {
};
/**
 * The object data (e.g., attributes) type for the TrajUser class.
 */
struct TrajUser_od {
};
/**
 * The store type for the TrajUser class. It contains:
 * 		 - value of its current state
 * 		 - content of its event pool
 * 		 - values of its attributes
 */
struct TrajUser_store {
};
/**
 * The Store type used to gather dynamic data of each active object.
 */
struct Store {
	#ifdef WITH_SCHEDULING_STATE
	uint32_t scheduling_state;
	#endif /* WITH_SCHEDULING_STATE */
	Main_store instMain;
	System_store instMain_system;
	Controller_store instMain_system_controller;
	TrajectoryManager_store instMain_system_trajectoryManager;
	ControllerToPlayerPortSys_store instMain_system_controllerToPlayerPortSys;
	ControllerToRefereePortSys_store instMain_system_controllerToRefereePortSys;
	TrajToPlayerPortSys_store instMain_system_trajToPlayerPortSys;
	TrajToRefereePortSys_store instMain_system_trajToRefereePortSys;
	Environment_store instMain_environment;
	CommunicationPlayer_store instMain_environment_comPlayer;
	CommunicationReferee_store instMain_environment_comReferee;
	ControllerToPlayerPortEnv_store instMain_environment_controllerToPlayerPortEnv;
	ControllerToRefereePortEnv_store instMain_environment_controllerToRefereePortEnv;
	TrajToPlayerPortEnv_store instMain_environment_trajToPlayerPortEnv;
	TrajToRefereePortEnv_store instMain_environment_trajToRefereePortEnv;
	#ifdef WITH_OBSERVERS
	Obs_store instObs;
	DirectionObserver_store instObs_observer;
	#endif /* WITH_OBSERVERS */
};
extern Store store;

#ifdef ANALYSIS_WITH_DIFF
extern Store refStore;
#endif /* ANALYSIS_WITH_DIFF */

/**
 * The SignalEvents type used to gather all signal events.
 */
struct SignalEvents {
	UML_SignalEvent * connected;
	UML_SignalEvent * goPos;
	UML_SignalEvent * goAngle;
	UML_SignalEvent * finish;
	UML_SignalEvent * error;
	UML_SignalEvent * moveForward;
	UML_SignalEvent * moveRight;
	UML_SignalEvent * spin;
	UML_SignalEvent * stop;
	UML_SignalEvent * setSuction;
	UML_SignalEvent * getSuction;
	UML_SignalEvent * getPlayerGPS;
	UML_SignalEvent * getBallGPS;
	UML_SignalEvent * getCompass;
	UML_SignalEvent * rspPlayerGPS;
	UML_SignalEvent * rspBallGPS;
	UML_SignalEvent * rspSuction;
	UML_SignalEvent * rspCompass;
	UML_SignalEvent * playerConnected;
	UML_SignalEvent * refereeConnected;
	UML_SignalEvent * possession;
	UML_SignalEvent * abort;
	UML_SignalEvent * done;
	UML_SignalEvent * opponentScored;
	UML_SignalEvent * timeout;
	UML_SignalEvent * refereeAck;
	UML_SignalEvent * checkReferee;
};
extern SignalEvents globalSignalEvents;


/**
 * Structures initializer for operations.
 */
struct TrajToRefereePortEnv_operations {
};

struct ControllerToPlayerPortSys_operations {
};

struct TrajToPlayerPortSys_operations {
};

struct ControllerFromRefereeUser_operations {
};

struct Main_operations {
};

struct Obs_operations {
};

struct TrajToRefereeProvider_operations {
};

struct Controller_operations {
};

struct TrajectoryManager_operations {
};

struct DirectionObserver_operations {
};

struct TrajFromPlayerProvider_operations {
};

struct ControllerFromRefereeProvider_operations {
};

struct TrajToPlayerUser_operations {
};

struct TrajUser_operations {
};

struct ControllerToRefereePortEnv_operations {
};

struct TrajToRefereeUser_operations {
};

struct ControllerToRefereePortSys_operations {
};

struct RefereeUser_operations {
};

struct TrajToPlayerPortEnv_operations {
};

struct TrajFromPlayerUser_operations {
};

struct TrajFromRefereeUser_operations {
};

struct ControllerToPlayerPortEnv_operations {
};

struct PlayerUser_operations {
};

struct CommunicationPlayer_operations {
};

struct TrajToRefereePortSys_operations {
};

struct TrajToPlayerProvider_operations {
};

struct Environment_operations {
};

struct System_operations {
};

struct CommunicationReferee_operations {
};

struct TrajFromRefereeProvider_operations {
};


/**
 * Macros for the mutability field of mutability structure.
 */
#define ABSTRACT_MUTABILITY_Obs  bool observer_isMutable		:1;

#define ABSTRACT_MUTABILITY_DirectionObserver  

#define ABSTRACT_MUTABILITY_System  bool trajectoryManager_isMutable		:1;	\
	bool trajToPlayerPortSys_isMutable		:1;	\
	bool controllerToRefereePortSys_isMutable		:1;	\
	bool trajToRefereePortSys_isMutable		:1;	\
	bool controller_isMutable		:1;	\
	bool controllerToPlayerPortSys_isMutable		:1;

#define ABSTRACT_MUTABILITY_ControllerToPlayerPortSys  bool controllerToPlayerPortEnv_isMutable		:1;	\
	bool controller_isMutable		:1;

#define ABSTRACT_MUTABILITY_ControllerToRefereePortSys  bool controllerToRefereePortEnv_isMutable		:1;	\
	bool controller_isMutable		:1;

#define ABSTRACT_MUTABILITY_TrajToPlayerPortSys  bool trajectoryManager_isMutable		:1;	\
	bool trajToPlayerPortEnv_isMutable		:1;

#define ABSTRACT_MUTABILITY_TrajToRefereePortSys  bool trajToRefereePortEnv_isMutable		:1;	\
	bool trajectoryManager_isMutable		:1;

#define ABSTRACT_MUTABILITY_Controller  bool trajectoryManager_isMutable		:1;	\
	bool comPlayer_isMutable		:1;	\
	bool comReferee_isMutable		:1;

#define ABSTRACT_MUTABILITY_TrajectoryManager  bool comPlayer_isMutable		:1;	\
	bool comReferee_isMutable		:1;	\
	bool controller_isMutable		:1;	\
	bool xPlayer_isMutable		:1;	\
	bool zPlayer_isMutable		:1;	\
	bool aPlayer_isMutable		:1;	\
	bool xBall_isMutable		:1;	\
	bool zBall_isMutable		:1;	\
	bool xArrived_isMutable		:1;	\
	bool zArrived_isMutable		:1;	\
	bool aArrived_isMutable		:1;	\
	bool trajectory_isMutable		:1;	\
	bool xTarget_isMutable		:1;	\
	bool zTarget_isMutable		:1;	\
	bool ballTarget_isMutable		:1;	\
	bool receivedBall_isMutable		:1;	\
	bool receivedPlayer_isMutable		:1;	\
	bool receivedCompass_isMutable		:1;	\
	bool needTurn_isMutable		:1;	\
	bool ballInRobot_isMutable		:1;	\
	bool playerConnected_isMutable		:1;	\
	bool refereeConnected_isMutable		:1;	\
	bool error_isMutable		:1;	\
	bool ack_isMutable		:1;	\
	bool kp_isMutable		:1;

#define ABSTRACT_MUTABILITY_Main  bool environment_isMutable		:1;	\
	bool system_isMutable		:1;

#define ABSTRACT_MUTABILITY_Environment  bool trajToPlayerPortEnv_isMutable		:1;	\
	bool comReferee_isMutable		:1;	\
	bool controllerToRefereePortEnv_isMutable		:1;	\
	bool comPlayer_isMutable		:1;	\
	bool trajToRefereePortEnv_isMutable		:1;	\
	bool controllerToPlayerPortEnv_isMutable		:1;

#define ABSTRACT_MUTABILITY_ControllerToPlayerPortEnv  bool comPlayer_isMutable		:1;	\
	bool controllerToPlayerPortSys_isMutable		:1;

#define ABSTRACT_MUTABILITY_ControllerToRefereePortEnv  bool controllerToRefereePortSys_isMutable		:1;	\
	bool comReferee_isMutable		:1;

#define ABSTRACT_MUTABILITY_TrajToPlayerPortEnv  bool trajToPlayerPortSys_isMutable		:1;	\
	bool comPlayer_isMutable		:1;

#define ABSTRACT_MUTABILITY_TrajToRefereePortEnv  bool trajToRefereePortSys_isMutable		:1;	\
	bool comReferee_isMutable		:1;

#define ABSTRACT_MUTABILITY_CommunicationPlayer  bool controller_isMutable		:1;	\
	bool trajectoryManager_isMutable		:1;	\
	bool tcpPort_isMutable		:1;	\
	bool connected_isMutable		:1;	\
	bool status_isMutable		:1;

#define ABSTRACT_MUTABILITY_CommunicationReferee  bool trajectoryManager_isMutable		:1;	\
	bool controller_isMutable		:1;	\
	bool tcpPort_isMutable		:1;	\
	bool connected_isMutable		:1;	\
	bool status_isMutable		:1;

#define ABSTRACT_MUTABILITY_TrajFromPlayerProvider  

#define ABSTRACT_MUTABILITY_TrajFromPlayerUser  

#define ABSTRACT_MUTABILITY_TrajFromRefereeProvider  

#define ABSTRACT_MUTABILITY_TrajFromRefereeUser  

#define ABSTRACT_MUTABILITY_TrajToPlayerProvider  

#define ABSTRACT_MUTABILITY_TrajToPlayerUser  

#define ABSTRACT_MUTABILITY_TrajToRefereeProvider  

#define ABSTRACT_MUTABILITY_TrajToRefereeUser  

#define ABSTRACT_MUTABILITY_ControllerFromRefereeProvider  

#define ABSTRACT_MUTABILITY_ControllerFromRefereeUser  

#define ABSTRACT_MUTABILITY_RefereeUser  

#define ABSTRACT_MUTABILITY_PlayerUser  

#define ABSTRACT_MUTABILITY_TrajUser  

/**
 * Mutability structures.
 */
struct Obs_mutability {
	ABSTRACT_MUTABILITY_Obs
};

struct DirectionObserver_mutability {
	ABSTRACT_MUTABILITY_DirectionObserver
};

struct System_mutability {
	ABSTRACT_MUTABILITY_System
};

struct ControllerToPlayerPortSys_mutability {
	ABSTRACT_MUTABILITY_TrajToPlayerUser
	ABSTRACT_MUTABILITY_ControllerToPlayerPortSys
};

struct ControllerToRefereePortSys_mutability {
	ABSTRACT_MUTABILITY_ControllerToRefereePortSys
};

struct TrajToPlayerPortSys_mutability {
	ABSTRACT_MUTABILITY_TrajToPlayerUser
	ABSTRACT_MUTABILITY_TrajToPlayerPortSys
};

struct TrajToRefereePortSys_mutability {
	ABSTRACT_MUTABILITY_TrajToRefereeUser
	ABSTRACT_MUTABILITY_TrajToRefereePortSys
};

struct Controller_mutability {
	ABSTRACT_MUTABILITY_TrajToPlayerUser
	ABSTRACT_MUTABILITY_Controller
};

struct TrajectoryManager_mutability {
	ABSTRACT_MUTABILITY_TrajUser
	ABSTRACT_MUTABILITY_TrajectoryManager
};

struct Main_mutability {
	ABSTRACT_MUTABILITY_Main
};

struct Environment_mutability {
	ABSTRACT_MUTABILITY_Environment
};

struct ControllerToPlayerPortEnv_mutability {
	ABSTRACT_MUTABILITY_TrajFromPlayerUser
	ABSTRACT_MUTABILITY_ControllerToPlayerPortEnv
};

struct ControllerToRefereePortEnv_mutability {
	ABSTRACT_MUTABILITY_ControllerFromRefereeUser
	ABSTRACT_MUTABILITY_ControllerToRefereePortEnv
};

struct TrajToPlayerPortEnv_mutability {
	ABSTRACT_MUTABILITY_TrajFromPlayerUser
	ABSTRACT_MUTABILITY_TrajToPlayerPortEnv
};

struct TrajToRefereePortEnv_mutability {
	ABSTRACT_MUTABILITY_TrajFromRefereeUser
	ABSTRACT_MUTABILITY_TrajToRefereePortEnv
};

struct CommunicationPlayer_mutability {
	ABSTRACT_MUTABILITY_PlayerUser
	ABSTRACT_MUTABILITY_CommunicationPlayer
};

struct CommunicationReferee_mutability {
	ABSTRACT_MUTABILITY_RefereeUser
	ABSTRACT_MUTABILITY_CommunicationReferee
};

struct TrajFromPlayerProvider_mutability {
	ABSTRACT_MUTABILITY_TrajFromPlayerProvider
};

struct TrajFromPlayerUser_mutability {
	ABSTRACT_MUTABILITY_TrajFromPlayerUser
};

struct TrajFromRefereeProvider_mutability {
	ABSTRACT_MUTABILITY_TrajFromRefereeProvider
};

struct TrajFromRefereeUser_mutability {
	ABSTRACT_MUTABILITY_TrajFromRefereeUser
};

struct TrajToPlayerProvider_mutability {
	ABSTRACT_MUTABILITY_TrajToPlayerProvider
};

struct TrajToPlayerUser_mutability {
	ABSTRACT_MUTABILITY_TrajToPlayerUser
};

struct TrajToRefereeProvider_mutability {
	ABSTRACT_MUTABILITY_TrajToRefereeProvider
};

struct TrajToRefereeUser_mutability {
	ABSTRACT_MUTABILITY_TrajToRefereeUser
};

struct ControllerFromRefereeProvider_mutability {
	ABSTRACT_MUTABILITY_ControllerFromRefereeProvider
};

struct ControllerFromRefereeUser_mutability {
	ABSTRACT_MUTABILITY_ControllerFromRefereeUser
};

struct RefereeUser_mutability {
	ABSTRACT_MUTABILITY_RefereeUser
};

struct PlayerUser_mutability {
	ABSTRACT_MUTABILITY_PlayerUser
};

struct TrajUser_mutability {
	ABSTRACT_MUTABILITY_TrajUser
};

/**
 * Macros for the properties_types field of properties type structure.
 */
#define ABSTRACT_PROPERTIES_TYPE_Obs  Obs_properties_ro * observer_type;

#define ABSTRACT_PROPERTIES_TYPE_DirectionObserver  

#define ABSTRACT_PROPERTIES_TYPE_System  System_properties_ro * trajectoryManager_type;	\
	System_properties_ro * trajToPlayerPortSys_type;	\
	System_properties_ro * controllerToRefereePortSys_type;	\
	System_properties_ro * trajToRefereePortSys_type;	\
	System_properties_ro * controller_type;	\
	System_properties_ro * controllerToPlayerPortSys_type;

#define ABSTRACT_PROPERTIES_TYPE_ControllerToPlayerPortSys  ControllerToPlayerPortSys_properties_ro * controllerToPlayerPortEnv_type;	\
	ControllerToPlayerPortSys_properties_ro * controller_type;

#define ABSTRACT_PROPERTIES_TYPE_ControllerToRefereePortSys  ControllerToRefereePortSys_properties_ro * controllerToRefereePortEnv_type;	\
	ControllerToRefereePortSys_properties_ro * controller_type;

#define ABSTRACT_PROPERTIES_TYPE_TrajToPlayerPortSys  TrajToPlayerPortSys_properties_ro * trajectoryManager_type;	\
	TrajToPlayerPortSys_properties_ro * trajToPlayerPortEnv_type;

#define ABSTRACT_PROPERTIES_TYPE_TrajToRefereePortSys  TrajToRefereePortSys_properties_ro * trajToRefereePortEnv_type;	\
	TrajToRefereePortSys_properties_ro * trajectoryManager_type;

#define ABSTRACT_PROPERTIES_TYPE_Controller  Controller_properties_ro * trajectoryManager_type;	\
	Controller_properties_ro * comPlayer_type;	\
	Controller_properties_ro * comReferee_type;

#define ABSTRACT_PROPERTIES_TYPE_TrajectoryManager  TrajectoryManager_properties_ro * comPlayer_type;	\
	TrajectoryManager_properties_ro * comReferee_type;	\
	TrajectoryManager_properties_ro * controller_type;	\
	TrajectoryManager_od * xPlayer_type;	\
	TrajectoryManager_od * zPlayer_type;	\
	TrajectoryManager_od * aPlayer_type;	\
	TrajectoryManager_od * xBall_type;	\
	TrajectoryManager_od * zBall_type;	\
	TrajectoryManager_od * xArrived_type;	\
	TrajectoryManager_od * zArrived_type;	\
	TrajectoryManager_od * aArrived_type;	\
	TrajectoryManager_od * trajectory_type;	\
	TrajectoryManager_od * xTarget_type;	\
	TrajectoryManager_od * zTarget_type;	\
	TrajectoryManager_od * ballTarget_type;	\
	TrajectoryManager_od * receivedBall_type;	\
	TrajectoryManager_od * receivedPlayer_type;	\
	TrajectoryManager_od * receivedCompass_type;	\
	TrajectoryManager_od * needTurn_type;	\
	TrajectoryManager_od * ballInRobot_type;	\
	TrajectoryManager_od * playerConnected_type;	\
	TrajectoryManager_od * refereeConnected_type;	\
	TrajectoryManager_od * error_type;	\
	TrajectoryManager_od * ack_type;	\
	TrajectoryManager_od * kp_type;

#define ABSTRACT_PROPERTIES_TYPE_Main  Main_properties_ro * environment_type;	\
	Main_properties_ro * system_type;

#define ABSTRACT_PROPERTIES_TYPE_Environment  Environment_properties_ro * trajToPlayerPortEnv_type;	\
	Environment_properties_ro * comReferee_type;	\
	Environment_properties_ro * controllerToRefereePortEnv_type;	\
	Environment_properties_ro * comPlayer_type;	\
	Environment_properties_ro * trajToRefereePortEnv_type;	\
	Environment_properties_ro * controllerToPlayerPortEnv_type;

#define ABSTRACT_PROPERTIES_TYPE_ControllerToPlayerPortEnv  ControllerToPlayerPortEnv_properties_ro * comPlayer_type;	\
	ControllerToPlayerPortEnv_properties_ro * controllerToPlayerPortSys_type;

#define ABSTRACT_PROPERTIES_TYPE_ControllerToRefereePortEnv  ControllerToRefereePortEnv_properties_ro * controllerToRefereePortSys_type;	\
	ControllerToRefereePortEnv_properties_ro * comReferee_type;

#define ABSTRACT_PROPERTIES_TYPE_TrajToPlayerPortEnv  TrajToPlayerPortEnv_properties_ro * trajToPlayerPortSys_type;	\
	TrajToPlayerPortEnv_properties_ro * comPlayer_type;

#define ABSTRACT_PROPERTIES_TYPE_TrajToRefereePortEnv  TrajToRefereePortEnv_properties_ro * trajToRefereePortSys_type;	\
	TrajToRefereePortEnv_properties_ro * comReferee_type;

#define ABSTRACT_PROPERTIES_TYPE_CommunicationPlayer  CommunicationPlayer_properties_ro * controller_type;	\
	CommunicationPlayer_properties_ro * trajectoryManager_type;	\
	CommunicationPlayer_od * tcpPort_type;	\
	CommunicationPlayer_od * connected_type;	\
	CommunicationPlayer_od * status_type;

#define ABSTRACT_PROPERTIES_TYPE_CommunicationReferee  CommunicationReferee_properties_ro * trajectoryManager_type;	\
	CommunicationReferee_properties_ro * controller_type;	\
	CommunicationReferee_od * tcpPort_type;	\
	CommunicationReferee_od * connected_type;	\
	CommunicationReferee_od * status_type;

#define ABSTRACT_PROPERTIES_TYPE_TrajFromPlayerProvider  

#define ABSTRACT_PROPERTIES_TYPE_TrajFromPlayerUser  

#define ABSTRACT_PROPERTIES_TYPE_TrajFromRefereeProvider  

#define ABSTRACT_PROPERTIES_TYPE_TrajFromRefereeUser  

#define ABSTRACT_PROPERTIES_TYPE_TrajToPlayerProvider  

#define ABSTRACT_PROPERTIES_TYPE_TrajToPlayerUser  

#define ABSTRACT_PROPERTIES_TYPE_TrajToRefereeProvider  

#define ABSTRACT_PROPERTIES_TYPE_TrajToRefereeUser  

#define ABSTRACT_PROPERTIES_TYPE_ControllerFromRefereeProvider  

#define ABSTRACT_PROPERTIES_TYPE_ControllerFromRefereeUser  

#define ABSTRACT_PROPERTIES_TYPE_RefereeUser  

#define ABSTRACT_PROPERTIES_TYPE_PlayerUser  

#define ABSTRACT_PROPERTIES_TYPE_TrajUser  

/**
 * Properties type structures.
 */
struct Obs_PropertiesTypes {
	ABSTRACT_PROPERTIES_TYPE_Obs
};

struct DirectionObserver_PropertiesTypes {
	ABSTRACT_PROPERTIES_TYPE_DirectionObserver
};

struct System_PropertiesTypes {
	ABSTRACT_PROPERTIES_TYPE_System
};

struct ControllerToPlayerPortSys_PropertiesTypes {
	ABSTRACT_PROPERTIES_TYPE_TrajToPlayerUser
	ABSTRACT_PROPERTIES_TYPE_ControllerToPlayerPortSys
};

struct ControllerToRefereePortSys_PropertiesTypes {
	ABSTRACT_PROPERTIES_TYPE_ControllerToRefereePortSys
};

struct TrajToPlayerPortSys_PropertiesTypes {
	ABSTRACT_PROPERTIES_TYPE_TrajToPlayerUser
	ABSTRACT_PROPERTIES_TYPE_TrajToPlayerPortSys
};

struct TrajToRefereePortSys_PropertiesTypes {
	ABSTRACT_PROPERTIES_TYPE_TrajToRefereeUser
	ABSTRACT_PROPERTIES_TYPE_TrajToRefereePortSys
};

struct Controller_PropertiesTypes {
	ABSTRACT_PROPERTIES_TYPE_TrajToPlayerUser
	ABSTRACT_PROPERTIES_TYPE_Controller
};

struct TrajectoryManager_PropertiesTypes {
	ABSTRACT_PROPERTIES_TYPE_TrajUser
	ABSTRACT_PROPERTIES_TYPE_TrajectoryManager
};

struct Main_PropertiesTypes {
	ABSTRACT_PROPERTIES_TYPE_Main
};

struct Environment_PropertiesTypes {
	ABSTRACT_PROPERTIES_TYPE_Environment
};

struct ControllerToPlayerPortEnv_PropertiesTypes {
	ABSTRACT_PROPERTIES_TYPE_TrajFromPlayerUser
	ABSTRACT_PROPERTIES_TYPE_ControllerToPlayerPortEnv
};

struct ControllerToRefereePortEnv_PropertiesTypes {
	ABSTRACT_PROPERTIES_TYPE_ControllerFromRefereeUser
	ABSTRACT_PROPERTIES_TYPE_ControllerToRefereePortEnv
};

struct TrajToPlayerPortEnv_PropertiesTypes {
	ABSTRACT_PROPERTIES_TYPE_TrajFromPlayerUser
	ABSTRACT_PROPERTIES_TYPE_TrajToPlayerPortEnv
};

struct TrajToRefereePortEnv_PropertiesTypes {
	ABSTRACT_PROPERTIES_TYPE_TrajFromRefereeUser
	ABSTRACT_PROPERTIES_TYPE_TrajToRefereePortEnv
};

struct CommunicationPlayer_PropertiesTypes {
	ABSTRACT_PROPERTIES_TYPE_PlayerUser
	ABSTRACT_PROPERTIES_TYPE_CommunicationPlayer
};

struct CommunicationReferee_PropertiesTypes {
	ABSTRACT_PROPERTIES_TYPE_RefereeUser
	ABSTRACT_PROPERTIES_TYPE_CommunicationReferee
};

struct TrajFromPlayerProvider_PropertiesTypes {
	ABSTRACT_PROPERTIES_TYPE_TrajFromPlayerProvider
};

struct TrajFromPlayerUser_PropertiesTypes {
	ABSTRACT_PROPERTIES_TYPE_TrajFromPlayerUser
};

struct TrajFromRefereeProvider_PropertiesTypes {
	ABSTRACT_PROPERTIES_TYPE_TrajFromRefereeProvider
};

struct TrajFromRefereeUser_PropertiesTypes {
	ABSTRACT_PROPERTIES_TYPE_TrajFromRefereeUser
};

struct TrajToPlayerProvider_PropertiesTypes {
	ABSTRACT_PROPERTIES_TYPE_TrajToPlayerProvider
};

struct TrajToPlayerUser_PropertiesTypes {
	ABSTRACT_PROPERTIES_TYPE_TrajToPlayerUser
};

struct TrajToRefereeProvider_PropertiesTypes {
	ABSTRACT_PROPERTIES_TYPE_TrajToRefereeProvider
};

struct TrajToRefereeUser_PropertiesTypes {
	ABSTRACT_PROPERTIES_TYPE_TrajToRefereeUser
};

struct ControllerFromRefereeProvider_PropertiesTypes {
	ABSTRACT_PROPERTIES_TYPE_ControllerFromRefereeProvider
};

struct ControllerFromRefereeUser_PropertiesTypes {
	ABSTRACT_PROPERTIES_TYPE_ControllerFromRefereeUser
};

struct RefereeUser_PropertiesTypes {
	ABSTRACT_PROPERTIES_TYPE_RefereeUser
};

struct PlayerUser_PropertiesTypes {
	ABSTRACT_PROPERTIES_TYPE_PlayerUser
};

struct TrajUser_PropertiesTypes {
	ABSTRACT_PROPERTIES_TYPE_TrajUser
};


/**
 * Class information structures.
 */
struct Obs_classInfo {
	union {
		UML_Class * type;
		const Obs_PropertiesTypes * properties_types; // Should not be dereferenced
	};
	Obs_mutability mutability;
};

struct DirectionObserver_classInfo {
	union {
		UML_Class * type;
		const DirectionObserver_PropertiesTypes * properties_types; // Should not be dereferenced
	};
	DirectionObserver_mutability mutability;
};

struct System_classInfo {
	union {
		UML_Class * type;
		const System_PropertiesTypes * properties_types; // Should not be dereferenced
	};
	System_mutability mutability;
};

struct ControllerToPlayerPortSys_classInfo {
	union {
		UML_Class * type;
		const ControllerToPlayerPortSys_PropertiesTypes * properties_types; // Should not be dereferenced
	};
	ControllerToPlayerPortSys_mutability mutability;
};

struct ControllerToRefereePortSys_classInfo {
	union {
		UML_Class * type;
		const ControllerToRefereePortSys_PropertiesTypes * properties_types; // Should not be dereferenced
	};
	ControllerToRefereePortSys_mutability mutability;
};

struct TrajToPlayerPortSys_classInfo {
	union {
		UML_Class * type;
		const TrajToPlayerPortSys_PropertiesTypes * properties_types; // Should not be dereferenced
	};
	TrajToPlayerPortSys_mutability mutability;
};

struct TrajToRefereePortSys_classInfo {
	union {
		UML_Class * type;
		const TrajToRefereePortSys_PropertiesTypes * properties_types; // Should not be dereferenced
	};
	TrajToRefereePortSys_mutability mutability;
};

struct Controller_classInfo {
	union {
		UML_Class * type;
		const Controller_PropertiesTypes * properties_types; // Should not be dereferenced
	};
	Controller_mutability mutability;
};

struct TrajectoryManager_classInfo {
	union {
		UML_Class * type;
		const TrajectoryManager_PropertiesTypes * properties_types; // Should not be dereferenced
	};
	TrajectoryManager_mutability mutability;
};

struct Main_classInfo {
	union {
		UML_Class * type;
		const Main_PropertiesTypes * properties_types; // Should not be dereferenced
	};
	Main_mutability mutability;
};

struct Environment_classInfo {
	union {
		UML_Class * type;
		const Environment_PropertiesTypes * properties_types; // Should not be dereferenced
	};
	Environment_mutability mutability;
};

struct ControllerToPlayerPortEnv_classInfo {
	union {
		UML_Class * type;
		const ControllerToPlayerPortEnv_PropertiesTypes * properties_types; // Should not be dereferenced
	};
	ControllerToPlayerPortEnv_mutability mutability;
};

struct ControllerToRefereePortEnv_classInfo {
	union {
		UML_Class * type;
		const ControllerToRefereePortEnv_PropertiesTypes * properties_types; // Should not be dereferenced
	};
	ControllerToRefereePortEnv_mutability mutability;
};

struct TrajToPlayerPortEnv_classInfo {
	union {
		UML_Class * type;
		const TrajToPlayerPortEnv_PropertiesTypes * properties_types; // Should not be dereferenced
	};
	TrajToPlayerPortEnv_mutability mutability;
};

struct TrajToRefereePortEnv_classInfo {
	union {
		UML_Class * type;
		const TrajToRefereePortEnv_PropertiesTypes * properties_types; // Should not be dereferenced
	};
	TrajToRefereePortEnv_mutability mutability;
};

struct CommunicationPlayer_classInfo {
	union {
		UML_Class * type;
		const CommunicationPlayer_PropertiesTypes * properties_types; // Should not be dereferenced
	};
	CommunicationPlayer_mutability mutability;
};

struct CommunicationReferee_classInfo {
	union {
		UML_Class * type;
		const CommunicationReferee_PropertiesTypes * properties_types; // Should not be dereferenced
	};
	CommunicationReferee_mutability mutability;
};

struct TrajFromPlayerProvider_classInfo {
	union {
		UML_Class * type;
		const TrajFromPlayerProvider_PropertiesTypes * properties_types; // Should not be dereferenced
	};
	TrajFromPlayerProvider_mutability mutability;
};

struct TrajFromPlayerUser_classInfo {
	union {
		UML_Class * type;
		const TrajFromPlayerUser_PropertiesTypes * properties_types; // Should not be dereferenced
	};
	TrajFromPlayerUser_mutability mutability;
};

struct TrajFromRefereeProvider_classInfo {
	union {
		UML_Class * type;
		const TrajFromRefereeProvider_PropertiesTypes * properties_types; // Should not be dereferenced
	};
	TrajFromRefereeProvider_mutability mutability;
};

struct TrajFromRefereeUser_classInfo {
	union {
		UML_Class * type;
		const TrajFromRefereeUser_PropertiesTypes * properties_types; // Should not be dereferenced
	};
	TrajFromRefereeUser_mutability mutability;
};

struct TrajToPlayerProvider_classInfo {
	union {
		UML_Class * type;
		const TrajToPlayerProvider_PropertiesTypes * properties_types; // Should not be dereferenced
	};
	TrajToPlayerProvider_mutability mutability;
};

struct TrajToPlayerUser_classInfo {
	union {
		UML_Class * type;
		const TrajToPlayerUser_PropertiesTypes * properties_types; // Should not be dereferenced
	};
	TrajToPlayerUser_mutability mutability;
};

struct TrajToRefereeProvider_classInfo {
	union {
		UML_Class * type;
		const TrajToRefereeProvider_PropertiesTypes * properties_types; // Should not be dereferenced
	};
	TrajToRefereeProvider_mutability mutability;
};

struct TrajToRefereeUser_classInfo {
	union {
		UML_Class * type;
		const TrajToRefereeUser_PropertiesTypes * properties_types; // Should not be dereferenced
	};
	TrajToRefereeUser_mutability mutability;
};

struct ControllerFromRefereeProvider_classInfo {
	union {
		UML_Class * type;
		const ControllerFromRefereeProvider_PropertiesTypes * properties_types; // Should not be dereferenced
	};
	ControllerFromRefereeProvider_mutability mutability;
};

struct ControllerFromRefereeUser_classInfo {
	union {
		UML_Class * type;
		const ControllerFromRefereeUser_PropertiesTypes * properties_types; // Should not be dereferenced
	};
	ControllerFromRefereeUser_mutability mutability;
};

struct RefereeUser_classInfo {
	union {
		UML_Class * type;
		const RefereeUser_PropertiesTypes * properties_types; // Should not be dereferenced
	};
	RefereeUser_mutability mutability;
};

struct PlayerUser_classInfo {
	union {
		UML_Class * type;
		const PlayerUser_PropertiesTypes * properties_types; // Should not be dereferenced
	};
	PlayerUser_mutability mutability;
};

struct TrajUser_classInfo {
	union {
		UML_Class * type;
		const TrajUser_PropertiesTypes * properties_types; // Should not be dereferenced
	};
	TrajUser_mutability mutability;
};

/**
 * Specific types for active objects.
 */
SPECIFIC_STRUCT_ActiveObject(DirectionObserver)
SPECIFIC_STRUCT_ActiveObject(Controller)
SPECIFIC_STRUCT_ActiveObject(TrajectoryManager)
SPECIFIC_STRUCT_ActiveObject(CommunicationPlayer)
SPECIFIC_STRUCT_ActiveObject(CommunicationReferee)

/**
 * The ActiveObjects type used to gather all active objects
 */
struct ActiveObjects {
	Controller_Object * instMain_system_controller;
	TrajectoryManager_Object * instMain_system_trajectoryManager;
	CommunicationPlayer_Object * instMain_environment_comPlayer;
	CommunicationReferee_Object * instMain_environment_comReferee;
	#ifdef WITH_OBSERVERS
	DirectionObserver_Object * instObs_observer;
	#endif /* WITH_OBSERVERS */
};
extern ActiveObjects activeObjects;

/**
 * Specific types for passive objects.
 */
SPECIFIC_STRUCT_PassiveObject(Obs)
SPECIFIC_STRUCT_PassiveObject(System)
SPECIFIC_STRUCT_PassiveObject(ControllerToPlayerPortSys)
SPECIFIC_STRUCT_PassiveObject(ControllerToRefereePortSys)
SPECIFIC_STRUCT_PassiveObject(TrajToPlayerPortSys)
SPECIFIC_STRUCT_PassiveObject(TrajToRefereePortSys)
SPECIFIC_STRUCT_PassiveObject(Main)
SPECIFIC_STRUCT_PassiveObject(Environment)
SPECIFIC_STRUCT_PassiveObject(ControllerToPlayerPortEnv)
SPECIFIC_STRUCT_PassiveObject(ControllerToRefereePortEnv)
SPECIFIC_STRUCT_PassiveObject(TrajToPlayerPortEnv)
SPECIFIC_STRUCT_PassiveObject(TrajToRefereePortEnv)
SPECIFIC_STRUCT_PassiveObject(TrajFromPlayerProvider)
SPECIFIC_STRUCT_PassiveObject(TrajFromPlayerUser)
SPECIFIC_STRUCT_PassiveObject(TrajFromRefereeProvider)
SPECIFIC_STRUCT_PassiveObject(TrajFromRefereeUser)
SPECIFIC_STRUCT_PassiveObject(TrajToPlayerProvider)
SPECIFIC_STRUCT_PassiveObject(TrajToPlayerUser)
SPECIFIC_STRUCT_PassiveObject(TrajToRefereeProvider)
SPECIFIC_STRUCT_PassiveObject(TrajToRefereeUser)
SPECIFIC_STRUCT_PassiveObject(ControllerFromRefereeProvider)
SPECIFIC_STRUCT_PassiveObject(ControllerFromRefereeUser)
SPECIFIC_STRUCT_PassiveObject(RefereeUser)
SPECIFIC_STRUCT_PassiveObject(PlayerUser)
SPECIFIC_STRUCT_PassiveObject(TrajUser)

/**
 * The PassiveObjects type used to gather all passive objects
 */
struct PassiveObjects {
	Main_Object * instMain;
	System_Object * instMain_system;
	ControllerToPlayerPortSys_Object * instMain_system_controllerToPlayerPortSys;
	ControllerToRefereePortSys_Object * instMain_system_controllerToRefereePortSys;
	TrajToPlayerPortSys_Object * instMain_system_trajToPlayerPortSys;
	TrajToRefereePortSys_Object * instMain_system_trajToRefereePortSys;
	Environment_Object * instMain_environment;
	ControllerToPlayerPortEnv_Object * instMain_environment_controllerToPlayerPortEnv;
	ControllerToRefereePortEnv_Object * instMain_environment_controllerToRefereePortEnv;
	TrajToPlayerPortEnv_Object * instMain_environment_trajToPlayerPortEnv;
	TrajToRefereePortEnv_Object * instMain_environment_trajToRefereePortEnv;
	#ifdef WITH_OBSERVERS
	Obs_Object * instObs;
	#endif /* WITH_OBSERVERS */
};
extern PassiveObjects passiveObjects;

/**
 * Declaration of read-only properties types for superclasses.
 */
#define ABSTRACT_TRAJTOPLAYERUSER_PROPERTIES_RO 
#define ABSTRACT_TRAJUSER_PROPERTIES_RO 
#define ABSTRACT_TRAJTOREFEREEUSER_PROPERTIES_RO 
#define ABSTRACT_PLAYERUSER_PROPERTIES_RO 
#define ABSTRACT_REFEREEUSER_PROPERTIES_RO 
#define ABSTRACT_TRAJFROMPLAYERUSER_PROPERTIES_RO 
#define ABSTRACT_CONTROLLERFROMREFEREEUSER_PROPERTIES_RO 
#define ABSTRACT_TRAJFROMREFEREEUSER_PROPERTIES_RO 
/**
 * Declaration of read-only properties types for classes.
 */
/**
 * The TrajToRefereePortEnv_properties_ro type used to link instances of the TrajToRefereePortEnv class with their properties.
 */
struct TrajToRefereePortEnv_properties_ro {
	ABSTRACT_TRAJFROMREFEREEUSER_PROPERTIES_RO
	TrajToRefereePortSys_Object * trajToRefereePortSys;
	CommunicationReferee_Object * comReferee;
};
/**
 * The ControllerToPlayerPortSys_properties_ro type used to link instances of the ControllerToPlayerPortSys class with their properties.
 */
struct ControllerToPlayerPortSys_properties_ro {
	ABSTRACT_TRAJTOPLAYERUSER_PROPERTIES_RO
	ControllerToPlayerPortEnv_Object * controllerToPlayerPortEnv;
	Controller_Object * controller;
};
/**
 * The ControllerFromRefereeUser_properties_ro type used to link instances of the ControllerFromRefereeUser class with their properties.
 */
struct ControllerFromRefereeUser_properties_ro {
};
/**
 * The TrajToPlayerPortSys_properties_ro type used to link instances of the TrajToPlayerPortSys class with their properties.
 */
struct TrajToPlayerPortSys_properties_ro {
	ABSTRACT_TRAJTOPLAYERUSER_PROPERTIES_RO
	TrajectoryManager_Object * trajectoryManager;
	TrajToPlayerPortEnv_Object * trajToPlayerPortEnv;
};
/**
 * The Main_properties_ro type used to link instances of the Main class with their properties.
 */
struct Main_properties_ro {
	Environment_Object * environment;
	System_Object * system;
};
/**
 * The Obs_properties_ro type used to link instances of the Obs class with their properties.
 */
struct Obs_properties_ro {
	DirectionObserver_Object * observer;
};
/**
 * The TrajToRefereeProvider_properties_ro type used to link instances of the TrajToRefereeProvider class with their properties.
 */
struct TrajToRefereeProvider_properties_ro {
};
/**
 * The Controller_properties_ro type used to link instances of the Controller class with their properties.
 */
struct Controller_properties_ro {
	ABSTRACT_TRAJTOPLAYERUSER_PROPERTIES_RO
	TrajectoryManager_Object * trajectoryManager;
	ControllerToPlayerPortSys_Object * comPlayer;
	ControllerToRefereePortSys_Object * comReferee;
};
/**
 * The TrajectoryManager_properties_ro type used to link instances of the TrajectoryManager class with their properties.
 */
struct TrajectoryManager_properties_ro {
	ABSTRACT_TRAJUSER_PROPERTIES_RO
	TrajToPlayerPortSys_Object * comPlayer;
	TrajToRefereePortSys_Object * comReferee;
	Controller_Object * controller;
};
/**
 * The DirectionObserver_properties_ro type used to link instances of the DirectionObserver class with their properties.
 */
struct DirectionObserver_properties_ro {
};
/**
 * The TrajFromPlayerProvider_properties_ro type used to link instances of the TrajFromPlayerProvider class with their properties.
 */
struct TrajFromPlayerProvider_properties_ro {
};
/**
 * The ControllerFromRefereeProvider_properties_ro type used to link instances of the ControllerFromRefereeProvider class with their properties.
 */
struct ControllerFromRefereeProvider_properties_ro {
};
/**
 * The TrajToPlayerUser_properties_ro type used to link instances of the TrajToPlayerUser class with their properties.
 */
struct TrajToPlayerUser_properties_ro {
};
/**
 * The TrajUser_properties_ro type used to link instances of the TrajUser class with their properties.
 */
struct TrajUser_properties_ro {
};
/**
 * The ControllerToRefereePortEnv_properties_ro type used to link instances of the ControllerToRefereePortEnv class with their properties.
 */
struct ControllerToRefereePortEnv_properties_ro {
	ABSTRACT_CONTROLLERFROMREFEREEUSER_PROPERTIES_RO
	ControllerToRefereePortSys_Object * controllerToRefereePortSys;
	CommunicationReferee_Object * comReferee;
};
/**
 * The TrajToRefereeUser_properties_ro type used to link instances of the TrajToRefereeUser class with their properties.
 */
struct TrajToRefereeUser_properties_ro {
};
/**
 * The RefereeUser_properties_ro type used to link instances of the RefereeUser class with their properties.
 */
struct RefereeUser_properties_ro {
};
/**
 * The ControllerToRefereePortSys_properties_ro type used to link instances of the ControllerToRefereePortSys class with their properties.
 */
struct ControllerToRefereePortSys_properties_ro {
	ControllerToRefereePortEnv_Object * controllerToRefereePortEnv;
	Controller_Object * controller;
};
/**
 * The TrajToPlayerPortEnv_properties_ro type used to link instances of the TrajToPlayerPortEnv class with their properties.
 */
struct TrajToPlayerPortEnv_properties_ro {
	ABSTRACT_TRAJFROMPLAYERUSER_PROPERTIES_RO
	TrajToPlayerPortSys_Object * trajToPlayerPortSys;
	CommunicationPlayer_Object * comPlayer;
};
/**
 * The TrajFromPlayerUser_properties_ro type used to link instances of the TrajFromPlayerUser class with their properties.
 */
struct TrajFromPlayerUser_properties_ro {
};
/**
 * The TrajFromRefereeUser_properties_ro type used to link instances of the TrajFromRefereeUser class with their properties.
 */
struct TrajFromRefereeUser_properties_ro {
};
/**
 * The ControllerToPlayerPortEnv_properties_ro type used to link instances of the ControllerToPlayerPortEnv class with their properties.
 */
struct ControllerToPlayerPortEnv_properties_ro {
	ABSTRACT_TRAJFROMPLAYERUSER_PROPERTIES_RO
	CommunicationPlayer_Object * comPlayer;
	ControllerToPlayerPortSys_Object * controllerToPlayerPortSys;
};
/**
 * The PlayerUser_properties_ro type used to link instances of the PlayerUser class with their properties.
 */
struct PlayerUser_properties_ro {
};
/**
 * The CommunicationPlayer_properties_ro type used to link instances of the CommunicationPlayer class with their properties.
 */
struct CommunicationPlayer_properties_ro {
	ABSTRACT_PLAYERUSER_PROPERTIES_RO
	ControllerToPlayerPortEnv_Object * controller;
	TrajToPlayerPortEnv_Object * trajectoryManager;
};
/**
 * The TrajToRefereePortSys_properties_ro type used to link instances of the TrajToRefereePortSys class with their properties.
 */
struct TrajToRefereePortSys_properties_ro {
	ABSTRACT_TRAJTOREFEREEUSER_PROPERTIES_RO
	TrajToRefereePortEnv_Object * trajToRefereePortEnv;
	TrajectoryManager_Object * trajectoryManager;
};
/**
 * The TrajToPlayerProvider_properties_ro type used to link instances of the TrajToPlayerProvider class with their properties.
 */
struct TrajToPlayerProvider_properties_ro {
};
/**
 * The Environment_properties_ro type used to link instances of the Environment class with their properties.
 */
struct Environment_properties_ro {
	TrajToPlayerPortEnv_Object * trajToPlayerPortEnv;
	CommunicationReferee_Object * comReferee;
	ControllerToRefereePortEnv_Object * controllerToRefereePortEnv;
	CommunicationPlayer_Object * comPlayer;
	TrajToRefereePortEnv_Object * trajToRefereePortEnv;
	ControllerToPlayerPortEnv_Object * controllerToPlayerPortEnv;
};
/**
 * The System_properties_ro type used to link instances of the System class with their properties.
 */
struct System_properties_ro {
	TrajectoryManager_Object * trajectoryManager;
	TrajToPlayerPortSys_Object * trajToPlayerPortSys;
	ControllerToRefereePortSys_Object * controllerToRefereePortSys;
	TrajToRefereePortSys_Object * trajToRefereePortSys;
	Controller_Object * controller;
	ControllerToPlayerPortSys_Object * controllerToPlayerPortSys;
};
/**
 * The CommunicationReferee_properties_ro type used to link instances of the CommunicationReferee class with their properties.
 */
struct CommunicationReferee_properties_ro {
	ABSTRACT_REFEREEUSER_PROPERTIES_RO
	TrajToRefereePortEnv_Object * trajectoryManager;
	ControllerToRefereePortEnv_Object * controller;
};
/**
 * The TrajFromRefereeProvider_properties_ro type used to link instances of the TrajFromRefereeProvider class with their properties.
 */
struct TrajFromRefereeProvider_properties_ro {
};
/**
 * The global read-only properties type used to make links between objects.
 */
struct PropertiesRO {
	Main_properties_ro instMain;
	System_properties_ro instMain_system;
	Controller_properties_ro instMain_system_controller;
	TrajectoryManager_properties_ro instMain_system_trajectoryManager;
	ControllerToPlayerPortSys_properties_ro instMain_system_controllerToPlayerPortSys;
	ControllerToRefereePortSys_properties_ro instMain_system_controllerToRefereePortSys;
	TrajToPlayerPortSys_properties_ro instMain_system_trajToPlayerPortSys;
	TrajToRefereePortSys_properties_ro instMain_system_trajToRefereePortSys;
	Environment_properties_ro instMain_environment;
	CommunicationPlayer_properties_ro instMain_environment_comPlayer;
	CommunicationReferee_properties_ro instMain_environment_comReferee;
	ControllerToPlayerPortEnv_properties_ro instMain_environment_controllerToPlayerPortEnv;
	ControllerToRefereePortEnv_properties_ro instMain_environment_controllerToRefereePortEnv;
	TrajToPlayerPortEnv_properties_ro instMain_environment_trajToPlayerPortEnv;
	TrajToRefereePortEnv_properties_ro instMain_environment_trajToRefereePortEnv;
	#ifdef WITH_OBSERVERS
	Obs_properties_ro instObs;
	DirectionObserver_properties_ro instObs_observer;
	#endif /* WITH_OBSERVERS */
};
extern PropertiesRO properties_ro;

/**
 * The Ports type used to gather all ports.
 */
struct Ports {
	UML_Port * ChallengeSystem__POINT__System__POINT__controllerToPlayerPortSys;
	UML_Port * ChallengeSystem__POINT__System__POINT__controllerToRefereePortSys;
	UML_Port * ChallengeSystem__POINT__System__POINT__trajToPlayerPortSys;
	UML_Port * ChallengeSystem__POINT__System__POINT__trajToRefereePortSys;
	UML_Port * ChallengeEnv__POINT__Environment__POINT__controllerToPlayerPortEnv;
	UML_Port * ChallengeEnv__POINT__Environment__POINT__controllerToRefereePortEnv;
	UML_Port * ChallengeEnv__POINT__Environment__POINT__trajToPlayerPortEnv;
	UML_Port * ChallengeEnv__POINT__Environment__POINT__trajToRefereePortEnv;
};
#ifdef EVENT_PORT_TAGGING
	extern Ports globalPorts;
#endif


#endif /* MODEL_H */
