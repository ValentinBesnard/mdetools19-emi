<?xml version="1.0" encoding="ISO-8859-1"?>
<xmi:XMI xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:PlantUML="PlantUML">
  <PlantUML:Model>
    <element xsi:type="PlantUML:StateDiagram">
      <skinparams>
        <commentsBefore>hide empty description
skinparam shadowing false
skinparam &lt;&lt;junction>>stateBackgroundColor white
skinparam &lt;&lt;junction>>stateBorderColor white
skinparam defaultFontName DejaVu Sans
</commentsBefore>
      </skinparams>
      <region>
        <elements xsi:type="PlantUML:State" name="CommunicationPlayer" longName="CommunicationPlayer">
          <regions>
            <elements xsi:type="PlantUML:State" name="ChallengeEnv_CommunicationPlayer_SM_R_Connection" longName="Connection" kind="choice"/>
            <elements xsi:type="PlantUML:State" name="ChallengeEnv_CommunicationPlayer_SM_R_CheckStatus" longName="CheckStatus" kind="choice"/>
            <elements xsi:type="PlantUML:State" name="ChallengeEnv_CommunicationPlayer_SM_R_Idle" longName="Idle"/>
            <elements xsi:type="PlantUML:State" name="ChallengeEnv_CommunicationPlayer_SM_R_Connected" longName="Connected"/>
            <elements xsi:type="PlantUML:State" name="ChallengeEnv_CommunicationPlayer_SM_R_ReadSuction" longName="ReadSuction"/>
            <elements xsi:type="PlantUML:State" name="ChallengeEnv_CommunicationPlayer_SM_R_ReadPlayerGPS" longName="ReadPlayerGPS"/>
            <elements xsi:type="PlantUML:State" name="ChallengeEnv_CommunicationPlayer_SM_R_ReadBallGPS" longName="ReadBallGPS"/>
            <elements xsi:type="PlantUML:State" name="ChallengeEnv_CommunicationPlayer_SM_R_ReadCompass" longName="ReadCompass"/>
            <elements xsi:type="PlantUML:State" name="ChallengeEnv_CommunicationPlayer_SM_R_Error" longName="Error"/>
            <elements xsi:type="PlantUML:ExternalTransition" source="/1" target="/0/@element.0/@region/@elements.0/@regions.0/@elements.2" isVertical="true"/>
            <elements xsi:type="PlantUML:ExternalTransition" source="/0/@element.0/@region/@elements.0/@regions.0/@elements.2" target="/0/@element.0/@region/@elements.0/@regions.0/@elements.0" isVertical="true">
              <effect>&lt;font color=red>[[#{missing ABCD body}SET(this, connected, UML_TcpConnectionOpen(0, GET(this, tcpPort), TRUE));]]&lt;/font></effect>
            </elements>
            <elements xsi:type="PlantUML:ExternalTransition" source="/0/@element.0/@region/@elements.0/@regions.0/@elements.0" target="/0/@element.0/@region/@elements.0/@regions.0/@elements.3" isVertical="true">
              <guard>&lt;font color=red>[[#{missing ABCD body}GET(this, connected) == 1]]&lt;/font></guard>
              <effect>&lt;font color=red>[[#{missing ABCD body}SEND(GET(this, trajectoryManager), playerConnected);]]&lt;/font></effect>
            </elements>
            <elements xsi:type="PlantUML:ExternalTransition" source="/0/@element.0/@region/@elements.0/@regions.0/@elements.0" target="/0/@element.0/@region/@elements.0/@regions.0/@elements.2" isVertical="true">
              <guard>&lt;font color=red>[[#{missing ABCD body}else]]&lt;/font></guard>
            </elements>
            <elements xsi:type="PlantUML:InternalTransition" state="/0/@element.0/@region/@elements.0/@regions.0/@elements.3">
              <trigger>
                <parts>moveForward</parts>
              </trigger>
              <effect>&lt;font color=red>[[#{missing ABCD body}char str[128]; sprintf(str, ''player2,moveForward(%d)\n'', params->speed); UML_TcpConnectionWrite(0, str, strlen(str) + 1);]]&lt;/font></effect>
            </elements>
            <elements xsi:type="PlantUML:InternalTransition" state="/0/@element.0/@region/@elements.0/@regions.0/@elements.3">
              <trigger>
                <parts>moveRight</parts>
              </trigger>
              <effect>&lt;font color=red>[[#{missing ABCD body}char str[128]; sprintf(str, ''player2,moveRight(%d)\n'', params->speed); UML_TcpConnectionWrite(0, str, strlen(str) + 1);]]&lt;/font></effect>
            </elements>
            <elements xsi:type="PlantUML:InternalTransition" state="/0/@element.0/@region/@elements.0/@regions.0/@elements.3">
              <trigger>
                <parts>spin</parts>
              </trigger>
              <effect>&lt;font color=red>[[#{missing ABCD body}]]&lt;/font>\n&lt;font color=red>[[#{missing ABCD body}						char str[128];]]&lt;/font>\n&lt;font color=red>[[#{missing ABCD body}						sprintf(str, ''player2,spin(%d)\n'', params->speed); UML_TcpConnectionWrite(0, str, strlen(str) + 1);]]&lt;/font>\n&lt;font color=red>[[#{missing ABCD body}						if(params->stopAfter) {]]&lt;/font>\n&lt;font color=red>[[#{missing ABCD body}							sprintf(str, ''player2,spin(0)\n''); UML_TcpConnectionWrite(0, str, strlen(str) + 1);]]&lt;/font>\n&lt;font color=red>[[#{missing ABCD body}						}]]&lt;/font>\n&lt;font color=red>[[#{missing ABCD body}						]]&lt;/font></effect>
            </elements>
            <elements xsi:type="PlantUML:InternalTransition" state="/0/@element.0/@region/@elements.0/@regions.0/@elements.3">
              <trigger>
                <parts>stop</parts>
              </trigger>
              <effect>&lt;font color=red>[[#{missing ABCD body}char str[128] = ''player2,stop()\n''; UML_TcpConnectionWrite(0, str, strlen(str) + 1);]]&lt;/font></effect>
            </elements>
            <elements xsi:type="PlantUML:InternalTransition" state="/0/@element.0/@region/@elements.0/@regions.0/@elements.3">
              <trigger>
                <parts>setSuction</parts>
              </trigger>
              <effect>&lt;font color=red>[[#{missing ABCD body}char str[128]; sprintf(str, ''player2,setSuction(%d)\n'', params->power); UML_TcpConnectionWrite(0, str, strlen(str) + 1);]]&lt;/font></effect>
            </elements>
            <elements xsi:type="PlantUML:ExternalTransition" source="/0/@element.0/@region/@elements.0/@regions.0/@elements.3" target="/0/@element.0/@region/@elements.0/@regions.0/@elements.4" isVertical="true">
              <trigger>
                <parts>getSuction</parts>
              </trigger>
              <effect>&lt;font color=red>[[#{missing ABCD body}char str[128] = ''player2,getSuction()\n''; UML_TcpConnectionWrite(0, str, strlen(str) + 1);]]&lt;/font></effect>
            </elements>
            <elements xsi:type="PlantUML:ExternalTransition" source="/0/@element.0/@region/@elements.0/@regions.0/@elements.3" target="/0/@element.0/@region/@elements.0/@regions.0/@elements.5" isVertical="true">
              <trigger>
                <parts>getPlayerGPS</parts>
              </trigger>
              <effect>&lt;font color=red>[[#{missing ABCD body}char str[128] = ''player2,GPS()\n''; UML_TcpConnectionWrite(0, str, strlen(str) + 1);]]&lt;/font></effect>
            </elements>
            <elements xsi:type="PlantUML:ExternalTransition" source="/0/@element.0/@region/@elements.0/@regions.0/@elements.3" target="/0/@element.0/@region/@elements.0/@regions.0/@elements.6" isVertical="true">
              <trigger>
                <parts>getBallGPS</parts>
              </trigger>
              <effect>&lt;font color=red>[[#{missing ABCD body}char str[128] = ''ball,GPS()\n''; UML_TcpConnectionWrite(0, str, strlen(str) + 1);]]&lt;/font></effect>
            </elements>
            <elements xsi:type="PlantUML:ExternalTransition" source="/0/@element.0/@region/@elements.0/@regions.0/@elements.3" target="/0/@element.0/@region/@elements.0/@regions.0/@elements.7" isVertical="true">
              <trigger>
                <parts>getCompass</parts>
              </trigger>
              <effect>&lt;font color=red>[[#{missing ABCD body}char str[128] = ''player2,getCompass()\n''; UML_TcpConnectionWrite(0, str, strlen(str) + 1);]]&lt;/font></effect>
            </elements>
            <elements xsi:type="PlantUML:ExternalTransition" source="/0/@element.0/@region/@elements.0/@regions.0/@elements.4" target="/0/@element.0/@region/@elements.0/@regions.0/@elements.1" isVertical="true">
              <effect>&lt;font color=red>[[#{missing ABCD body}]]&lt;/font>\n&lt;font color=red>[[#{missing ABCD body}							char str[128] = {0}; SET(this, status, UML_TcpConnectionRead(0, str, 127)); ]]&lt;/font>\n&lt;font color=red>[[#{missing ABCD body}							if(GET(this, status)) { ]]&lt;/font>\n&lt;font color=red>[[#{missing ABCD body}								int power = 0; sscanf(str, ''player2,%d,%*d\n'', &amp;power);]]&lt;/font>\n&lt;font color=red>[[#{missing ABCD body}								SEND(GET(this, trajectoryManager), rspSuction, power);]]&lt;/font>\n&lt;font color=red>[[#{missing ABCD body}							}]]&lt;/font>\n&lt;font color=red>[[#{missing ABCD body}						]]&lt;/font></effect>
            </elements>
            <elements xsi:type="PlantUML:ExternalTransition" source="/0/@element.0/@region/@elements.0/@regions.0/@elements.5" target="/0/@element.0/@region/@elements.0/@regions.0/@elements.1" isVertical="true">
              <effect>&lt;font color=red>[[#{missing ABCD body}]]&lt;/font>\n&lt;font color=red>[[#{missing ABCD body}							char str[128] = {0}; SET(this, status, UML_TcpConnectionRead(0, str, 127));]]&lt;/font>\n&lt;font color=red>[[#{missing ABCD body}							if(GET(this, status)) {]]&lt;/font>\n&lt;font color=red>[[#{missing ABCD body}								int x = 0, z = 0;]]&lt;/font>\n&lt;font color=red>[[#{missing ABCD body}								int nums[4] = {0};]]&lt;/font>\n&lt;font color=red>[[#{missing ABCD body}								int nb = 0;]]&lt;/font>\n&lt;font color=red>[[#{missing ABCD body}								char * pch = strtok (str,'',''); // Read player]]&lt;/font>\n&lt;font color=red>[[#{missing ABCD body}								while (pch != NULL &amp;&amp; nb &lt; 4) {]]&lt;/font>\n&lt;font color=red>[[#{missing ABCD body}									pch = strtok (NULL,'','');]]&lt;/font>\n&lt;font color=red>[[#{missing ABCD body}									if(pch != NULL) {]]&lt;/font>\n&lt;font color=red>[[#{missing ABCD body}										sscanf(pch, ''%d'', &amp;(nums[nb]));]]&lt;/font>\n&lt;font color=red>[[#{missing ABCD body}										if(nb > 0 &amp;&amp; strchr(pch, 'E') != NULL) {]]&lt;/font>\n&lt;font color=red>[[#{missing ABCD body}											nums[nb - 1] = 0;]]&lt;/font>\n&lt;font color=red>[[#{missing ABCD body}										}]]&lt;/font>\n&lt;font color=red>[[#{missing ABCD body}										nb++;]]&lt;/font>\n&lt;font color=red>[[#{missing ABCD body}									}]]&lt;/font>\n&lt;font color=red>[[#{missing ABCD body}								}]]&lt;/font>\n&lt;font color=red>[[#{missing ABCD body}								x = nums[0];]]&lt;/font>\n&lt;font color=red>[[#{missing ABCD body}								z = nums[nb-2];]]&lt;/font>\n&lt;font color=red>[[#{missing ABCD body}]]&lt;/font>\n&lt;font color=red>[[#{missing ABCD body}								SEND(GET(this, trajectoryManager), rspPlayerGPS, x, z);]]&lt;/font>\n&lt;font color=red>[[#{missing ABCD body}							}]]&lt;/font>\n&lt;font color=red>[[#{missing ABCD body}						]]&lt;/font></effect>
            </elements>
            <elements xsi:type="PlantUML:ExternalTransition" source="/0/@element.0/@region/@elements.0/@regions.0/@elements.6" target="/0/@element.0/@region/@elements.0/@regions.0/@elements.1" isVertical="true">
              <effect>&lt;font color=red>[[#{missing ABCD body}]]&lt;/font>\n&lt;font color=red>[[#{missing ABCD body}							char str[128] = {0}; SET(this, status, UML_TcpConnectionRead(0, str, 127)); ]]&lt;/font>\n&lt;font color=red>[[#{missing ABCD body}							if(GET(this, status)) {]]&lt;/font>\n&lt;font color=red>[[#{missing ABCD body}								int x = 0, z = 0;]]&lt;/font>\n&lt;font color=red>[[#{missing ABCD body}								int nums[4] = {0};]]&lt;/font>\n&lt;font color=red>[[#{missing ABCD body}								int nb = 0;]]&lt;/font>\n&lt;font color=red>[[#{missing ABCD body}								char * pch = strtok (str,'',''); // Read player]]&lt;/font>\n&lt;font color=red>[[#{missing ABCD body}								while (pch != NULL &amp;&amp; nb &lt; 4) {]]&lt;/font>\n&lt;font color=red>[[#{missing ABCD body}									pch = strtok (NULL,'','');]]&lt;/font>\n&lt;font color=red>[[#{missing ABCD body}									if(pch != NULL) {]]&lt;/font>\n&lt;font color=red>[[#{missing ABCD body}										sscanf(pch, ''%d'', &amp;(nums[nb]));]]&lt;/font>\n&lt;font color=red>[[#{missing ABCD body}										if(nb > 0 &amp;&amp; strchr(pch, 'E') != NULL) {]]&lt;/font>\n&lt;font color=red>[[#{missing ABCD body}											nums[nb - 1] = 0;]]&lt;/font>\n&lt;font color=red>[[#{missing ABCD body}										}]]&lt;/font>\n&lt;font color=red>[[#{missing ABCD body}										nb++;]]&lt;/font>\n&lt;font color=red>[[#{missing ABCD body}									}]]&lt;/font>\n&lt;font color=red>[[#{missing ABCD body}								}]]&lt;/font>\n&lt;font color=red>[[#{missing ABCD body}								x = nums[0];]]&lt;/font>\n&lt;font color=red>[[#{missing ABCD body}								z = nums[nb-2];]]&lt;/font>\n&lt;font color=red>[[#{missing ABCD body}]]&lt;/font>\n&lt;font color=red>[[#{missing ABCD body}								SEND(GET(this, trajectoryManager), rspBallGPS, x, z);]]&lt;/font>\n&lt;font color=red>[[#{missing ABCD body}							}]]&lt;/font>\n&lt;font color=red>[[#{missing ABCD body}						]]&lt;/font></effect>
            </elements>
            <elements xsi:type="PlantUML:ExternalTransition" source="/0/@element.0/@region/@elements.0/@regions.0/@elements.7" target="/0/@element.0/@region/@elements.0/@regions.0/@elements.1" isVertical="true">
              <effect>&lt;font color=red>[[#{missing ABCD body}]]&lt;/font>\n&lt;font color=red>[[#{missing ABCD body}							char str[128] = {0}; SET(this, status, UML_TcpConnectionRead(0, str, 127)); ]]&lt;/font>\n&lt;font color=red>[[#{missing ABCD body}							if(GET(this, status)) {]]&lt;/font>\n&lt;font color=red>[[#{missing ABCD body}								int direction = 0; sscanf(str, ''player2,%d,%*d\n'', &amp;direction);]]&lt;/font>\n&lt;font color=red>[[#{missing ABCD body}								SEND(GET(this, trajectoryManager), rspCompass, direction);]]&lt;/font>\n&lt;font color=red>[[#{missing ABCD body}							}]]&lt;/font>\n&lt;font color=red>[[#{missing ABCD body}						]]&lt;/font></effect>
            </elements>
            <elements xsi:type="PlantUML:ExternalTransition" source="/0/@element.0/@region/@elements.0/@regions.0/@elements.1" target="/0/@element.0/@region/@elements.0/@regions.0/@elements.3" isVertical="true">
              <guard>&lt;font color=red>[[#{missing ABCD body}GET(this, status) != 0]]&lt;/font></guard>
            </elements>
            <elements xsi:type="PlantUML:ExternalTransition" source="/0/@element.0/@region/@elements.0/@regions.0/@elements.1" target="/0/@element.0/@region/@elements.0/@regions.0/@elements.8" isVertical="true">
              <guard>&lt;font color=red>[[#{missing ABCD body}else]]&lt;/font></guard>
              <effect>&lt;font color=red>[[#{missing ABCD body}printf(''Connection in error\n'');]]&lt;/font></effect>
            </elements>
            <elements xsi:type="PlantUML:ExternalTransition" source="/0/@element.0/@region/@elements.0/@regions.0/@elements.8" target="/0/@element.0/@region/@elements.0/@regions.0/@elements.2" isVertical="true">
              <effect>&lt;font color=red>[[#{missing ABCD body}SET(this, connected, 0); UML_TcpConnectionClose(0);]]&lt;/font></effect>
            </elements>
          </regions>
        </elements>
        <elements xsi:type="PlantUML:State" name="CommunicationReferee" longName="CommunicationReferee">
          <regions>
            <elements xsi:type="PlantUML:State" name="ChallengeEnv_CommunicationReferee_SM_R_Connection" longName="Connection" kind="choice"/>
            <elements xsi:type="PlantUML:State" name="ChallengeEnv_CommunicationReferee_SM_R_CheckStatus" longName="CheckStatus" kind="choice"/>
            <elements xsi:type="PlantUML:State" name="ChallengeEnv_CommunicationReferee_SM_R_Idle" longName="Idle"/>
            <elements xsi:type="PlantUML:State" name="ChallengeEnv_CommunicationReferee_SM_R_Connected" longName="Connected"/>
            <elements xsi:type="PlantUML:State" name="ChallengeEnv_CommunicationReferee_SM_R_Error" longName="Error"/>
            <elements xsi:type="PlantUML:ExternalTransition" source="/2" target="/0/@element.0/@region/@elements.1/@regions.0/@elements.2" isVertical="true"/>
            <elements xsi:type="PlantUML:ExternalTransition" source="/0/@element.0/@region/@elements.1/@regions.0/@elements.2" target="/0/@element.0/@region/@elements.1/@regions.0/@elements.0" isVertical="true">
              <effect>&lt;font color=red>[[#{missing ABCD body}SET(this, connected, UML_TcpConnectionOpen(1, GET(this, tcpPort), FALSE));]]&lt;/font></effect>
            </elements>
            <elements xsi:type="PlantUML:ExternalTransition" source="/0/@element.0/@region/@elements.1/@regions.0/@elements.0" target="/0/@element.0/@region/@elements.1/@regions.0/@elements.3" isVertical="true">
              <guard>&lt;font color=red>[[#{missing ABCD body}GET(this, connected) == 1]]&lt;/font></guard>
              <effect>&lt;font color=red>[[#{missing ABCD body}SEND(GET(this, trajectoryManager), refereeConnected);]]&lt;/font></effect>
            </elements>
            <elements xsi:type="PlantUML:ExternalTransition" source="/0/@element.0/@region/@elements.1/@regions.0/@elements.0" target="/0/@element.0/@region/@elements.1/@regions.0/@elements.4" isVertical="true">
              <guard>&lt;font color=red>[[#{missing ABCD body}else]]&lt;/font></guard>
            </elements>
            <elements xsi:type="PlantUML:ExternalTransition" source="/0/@element.0/@region/@elements.1/@regions.0/@elements.3" target="/0/@element.0/@region/@elements.1/@regions.0/@elements.1" isVertical="true">
              <trigger>
                <parts>checkReferee</parts>
              </trigger>
              <effect>&lt;font color=red>[[#{missing ABCD body}]]&lt;/font>\n&lt;font color=red>[[#{missing ABCD body}							char str[128] = {0}; SET(this, status, UML_TcpConnectionRead(1, str, 127));]]&lt;/font>\n&lt;font color=red>[[#{missing ABCD body}							if(GET(this, status)) {]]&lt;/font>\n&lt;font color=red>[[#{missing ABCD body}								char * pch = strtok (str,'';\n'');]]&lt;/font>\n&lt;font color=red>[[#{missing ABCD body}								bool possession = FALSE;]]&lt;/font>\n&lt;font color=red>[[#{missing ABCD body}								bool timeout = FALSE;]]&lt;/font>\n&lt;font color=red>[[#{missing ABCD body}								bool scored = FALSE;]]&lt;/font>\n&lt;font color=red>[[#{missing ABCD body}								while (pch != NULL) {]]&lt;/font>\n&lt;font color=red>[[#{missing ABCD body}									if(strcmp(pch, ''Possesion'') == 0) {]]&lt;/font>\n&lt;font color=red>[[#{missing ABCD body}										possession = TRUE;]]&lt;/font>\n&lt;font color=red>[[#{missing ABCD body}									} else if(strcmp(pch, ''TimeOut'') == 0) {]]&lt;/font>\n&lt;font color=red>[[#{missing ABCD body}										timeout = TRUE;]]&lt;/font>\n&lt;font color=red>[[#{missing ABCD body}									} else if(strcmp(pch, ''scored'') == 0) {]]&lt;/font>\n&lt;font color=red>[[#{missing ABCD body}										scored = TRUE;]]&lt;/font>\n&lt;font color=red>[[#{missing ABCD body}									} else if(strcmp(pch, ''Done'') == 0) {]]&lt;/font>\n&lt;font color=red>[[#{missing ABCD body}										SEND(GET(this, trajectoryManager), abort);]]&lt;/font>\n&lt;font color=red>[[#{missing ABCD body}										SEND(GET(this, controller), done);]]&lt;/font>\n&lt;font color=red>[[#{missing ABCD body}									} else if(strcmp(pch, ''player2'') == 0) {]]&lt;/font>\n&lt;font color=red>[[#{missing ABCD body}										if(possession) {]]&lt;/font>\n&lt;font color=red>[[#{missing ABCD body}											possession = FALSE;]]&lt;/font>\n&lt;font color=red>[[#{missing ABCD body}											SEND(GET(this, trajectoryManager), possession);]]&lt;/font>\n&lt;font color=red>[[#{missing ABCD body}										} else if(timeout) {]]&lt;/font>\n&lt;font color=red>[[#{missing ABCD body}											timeout = FALSE;]]&lt;/font>\n&lt;font color=red>[[#{missing ABCD body}											SEND(GET(this, trajectoryManager), abort);]]&lt;/font>\n&lt;font color=red>[[#{missing ABCD body}											SEND(GET(this, controller), timeout);]]&lt;/font>\n&lt;font color=red>[[#{missing ABCD body}										}]]&lt;/font>\n&lt;font color=red>[[#{missing ABCD body}									} else if(strcmp(pch, ''player1'') == 0) {]]&lt;/font>\n&lt;font color=red>[[#{missing ABCD body}										if(scored) {]]&lt;/font>\n&lt;font color=red>[[#{missing ABCD body}											scored = FALSE;]]&lt;/font>\n&lt;font color=red>[[#{missing ABCD body}											SEND(GET(this, trajectoryManager), abort);]]&lt;/font>\n&lt;font color=red>[[#{missing ABCD body}											SEND(GET(this, controller), opponentScored);]]&lt;/font>\n&lt;font color=red>[[#{missing ABCD body}										}]]&lt;/font>\n&lt;font color=red>[[#{missing ABCD body}									} else {]]&lt;/font>\n&lt;font color=red>[[#{missing ABCD body}										possession = FALSE;]]&lt;/font>\n&lt;font color=red>[[#{missing ABCD body}										scored = FALSE;]]&lt;/font>\n&lt;font color=red>[[#{missing ABCD body}										timeout = FALSE;]]&lt;/font>\n&lt;font color=red>[[#{missing ABCD body}									}]]&lt;/font>\n&lt;font color=red>[[#{missing ABCD body}									pch = strtok (NULL,'';\n'');]]&lt;/font>\n&lt;font color=red>[[#{missing ABCD body}								}]]&lt;/font>\n&lt;font color=red>[[#{missing ABCD body}							}]]&lt;/font>\n&lt;font color=red>[[#{missing ABCD body}							SEND(GET(this, trajectoryManager), refereeAck);]]&lt;/font>\n&lt;font color=red>[[#{missing ABCD body}						]]&lt;/font></effect>
            </elements>
            <elements xsi:type="PlantUML:ExternalTransition" source="/0/@element.0/@region/@elements.1/@regions.0/@elements.1" target="/0/@element.0/@region/@elements.1/@regions.0/@elements.3" isVertical="true">
              <guard>&lt;font color=red>[[#{missing ABCD body}GET(this, status) != 0]]&lt;/font></guard>
            </elements>
            <elements xsi:type="PlantUML:ExternalTransition" source="/0/@element.0/@region/@elements.1/@regions.0/@elements.1" target="/0/@element.0/@region/@elements.1/@regions.0/@elements.4" isVertical="true">
              <guard>&lt;font color=red>[[#{missing ABCD body}else]]&lt;/font></guard>
              <effect>&lt;font color=red>[[#{missing ABCD body}printf(''Connection in error\n'');]]&lt;/font></effect>
            </elements>
            <elements xsi:type="PlantUML:ExternalTransition" source="/0/@element.0/@region/@elements.1/@regions.0/@elements.4" target="/0/@element.0/@region/@elements.1/@regions.0/@elements.2" isVertical="true">
              <effect>&lt;font color=red>[[#{missing ABCD body}SET(this, connected, 0); UML_TcpConnectionClose(1);]]&lt;/font></effect>
            </elements>
          </regions>
        </elements>
      </region>
    </element>
  </PlantUML:Model>
  <PlantUML:State name="[*]" longName="Initial"/>
  <PlantUML:State name="[*]" longName="Initial"/>
</xmi:XMI>
