

@startuml
hide empty description
skinparam shadowing false
skinparam <<junction>>stateBackgroundColor white
skinparam <<junction>>stateBorderColor white
skinparam defaultFontName DejaVu Sans


	state "CommunicationPlayer" as CommunicationPlayer {
		
			state "Connection" as ChallengeEnv_CommunicationPlayer_SM_R_Connection <<choice>>
			state "CheckStatus" as ChallengeEnv_CommunicationPlayer_SM_R_CheckStatus <<choice>>
			state "Idle" as ChallengeEnv_CommunicationPlayer_SM_R_Idle
			state "Connected" as ChallengeEnv_CommunicationPlayer_SM_R_Connected
			state "ReadSuction" as ChallengeEnv_CommunicationPlayer_SM_R_ReadSuction
			state "ReadPlayerGPS" as ChallengeEnv_CommunicationPlayer_SM_R_ReadPlayerGPS
			state "ReadBallGPS" as ChallengeEnv_CommunicationPlayer_SM_R_ReadBallGPS
			state "ReadCompass" as ChallengeEnv_CommunicationPlayer_SM_R_ReadCompass
			state "Error" as ChallengeEnv_CommunicationPlayer_SM_R_Error
			[*] --> ChallengeEnv_CommunicationPlayer_SM_R_Idle
			ChallengeEnv_CommunicationPlayer_SM_R_Idle --> ChallengeEnv_CommunicationPlayer_SM_R_Connection : / SET(this, connected, UML_TcpConnectionOpen(0, GET(this, tcpPort), TRUE));
			ChallengeEnv_CommunicationPlayer_SM_R_Connection --> ChallengeEnv_CommunicationPlayer_SM_R_Connected : [GET(this, connected) == 1] / SEND(GET(this, trajectoryManager), playerConnected);
			ChallengeEnv_CommunicationPlayer_SM_R_Connection --> ChallengeEnv_CommunicationPlayer_SM_R_Idle : [else]
			ChallengeEnv_CommunicationPlayer_SM_R_Connected : moveForward / char str[128]; sprintf(str, ''player2,moveForward(%d)'', params->speed); UML_TcpConnectionWrite(0, str, strlen(str) + 1); [[ ]]
			ChallengeEnv_CommunicationPlayer_SM_R_Connected : moveRight / char str[128]; sprintf(str, ''player2,moveRight(%d)'', params->speed); UML_TcpConnectionWrite(0, str, strlen(str) + 1); [[ ]]
			ChallengeEnv_CommunicationPlayer_SM_R_Connected : spin / \nchar str[128];\nsprintf(str, ''player2,spin(%d)'', params->speed); UML_TcpConnectionWrite(0, str, strlen(str) + 1);\nif(params->stopAfter) {\nsprintf(str, ''player2,spin(0)''); UML_TcpConnectionWrite(0, str, strlen(str) + 1);\n}\n [[ ]]
			ChallengeEnv_CommunicationPlayer_SM_R_Connected : stop / char str[128] = ''player2,stop()''; UML_TcpConnectionWrite(0, str, strlen(str) + 1); [[ ]]
			ChallengeEnv_CommunicationPlayer_SM_R_Connected : setSuction / char str[128]; sprintf(str, ''player2,setSuction(%d)'', params->power); UML_TcpConnectionWrite(0, str, strlen(str) + 1); [[ ]]
			ChallengeEnv_CommunicationPlayer_SM_R_Connected --> ChallengeEnv_CommunicationPlayer_SM_R_ReadSuction : getSuction / char str[128] = ''player2,getSuction()''; UML_TcpConnectionWrite(0, str, strlen(str) + 1);
			ChallengeEnv_CommunicationPlayer_SM_R_Connected --> ChallengeEnv_CommunicationPlayer_SM_R_ReadPlayerGPS : getPlayerGPS / char str[128] = ''player2,GPS()''; UML_TcpConnectionWrite(0, str, strlen(str) + 1);
			ChallengeEnv_CommunicationPlayer_SM_R_Connected --> ChallengeEnv_CommunicationPlayer_SM_R_ReadBallGPS : getBallGPS / char str[128] = ''ball,GPS()''; UML_TcpConnectionWrite(0, str, strlen(str) + 1);
			ChallengeEnv_CommunicationPlayer_SM_R_Connected --> ChallengeEnv_CommunicationPlayer_SM_R_ReadCompass : getCompass / char str[128] = ''player2,getCompass()''; UML_TcpConnectionWrite(0, str, strlen(str) + 1);
			ChallengeEnv_CommunicationPlayer_SM_R_ReadSuction --> ChallengeEnv_CommunicationPlayer_SM_R_CheckStatus : / \nchar str[128] = {0}; SET(this, status, UML_TcpConnectionRead(0, str, 127)); \nif(GET(this, status)) { \nint power = 0; sscanf(str, ''player2,%d,%*d'', &power);\nSEND(GET(this, trajectoryManager), rspSuction, power);\n}\n
			ChallengeEnv_CommunicationPlayer_SM_R_ReadPlayerGPS --> ChallengeEnv_CommunicationPlayer_SM_R_CheckStatus : / \nchar str[128] = {0}; SET(this, status, UML_TcpConnectionRead(0, str, 127));\nif(GET(this, status)) {\nint x = 0, z = 0;\nint nums[4] = {0};\nint nb = 0;\nchar * pch = strtok (str,'',''); // Read player\nwhile (pch != NULL && nb < 4) {\npch = strtok (NULL,'','');\nif(pch != NULL) {\nsscanf(pch, ''%d'', &(nums[nb]));\nif(nb > 0 && strchr(pch, 'E') != NULL) {\nnums[nb - 1] = 0;\n}\nnb++;\n}\n}\nx = nums[0];\nz = nums[nb-2];\n\nSEND(GET(this, trajectoryManager), rspPlayerGPS, x, z);\n}\n
			ChallengeEnv_CommunicationPlayer_SM_R_ReadBallGPS --> ChallengeEnv_CommunicationPlayer_SM_R_CheckStatus : / \nchar str[128] = {0}; SET(this, status, UML_TcpConnectionRead(0, str, 127)); \nif(GET(this, status)) {\nint x = 0, z = 0;\nint nums[4] = {0};\nint nb = 0;\nchar * pch = strtok (str,'',''); // Read player\nwhile (pch != NULL && nb < 4) {\npch = strtok (NULL,'','');\nif(pch != NULL) {\nsscanf(pch, ''%d'', &(nums[nb]));\nif(nb > 0 && strchr(pch, 'E') != NULL) {\nnums[nb - 1] = 0;\n}\nnb++;\n}\n}\nx = nums[0];\nz = nums[nb-2];\n\nSEND(GET(this, trajectoryManager), rspBallGPS, x, z);\n}\n
			ChallengeEnv_CommunicationPlayer_SM_R_ReadCompass --> ChallengeEnv_CommunicationPlayer_SM_R_CheckStatus : / \nchar str[128] = {0}; SET(this, status, UML_TcpConnectionRead(0, str, 127)); \nif(GET(this, status)) {\nint direction = 0; sscanf(str, ''player2,%d,%*d'', &direction);\nSEND(GET(this, trajectoryManager), rspCompass, direction);\n}\n
			ChallengeEnv_CommunicationPlayer_SM_R_CheckStatus --> ChallengeEnv_CommunicationPlayer_SM_R_Connected : [GET(this, status) != 0]
			ChallengeEnv_CommunicationPlayer_SM_R_CheckStatus --> ChallengeEnv_CommunicationPlayer_SM_R_Error : [else] / printf(''Connection in error'');
			ChallengeEnv_CommunicationPlayer_SM_R_Error --> ChallengeEnv_CommunicationPlayer_SM_R_Idle : / SET(this, connected, 0); UML_TcpConnectionClose(0);
		
	}
	state "CommunicationReferee" as CommunicationReferee {
		
			state "Connection" as ChallengeEnv_CommunicationReferee_SM_R_Connection <<choice>>
			state "CheckStatus" as ChallengeEnv_CommunicationReferee_SM_R_CheckStatus <<choice>>
			state "Idle" as ChallengeEnv_CommunicationReferee_SM_R_Idle
			state "Connected" as ChallengeEnv_CommunicationReferee_SM_R_Connected
			state "Error" as ChallengeEnv_CommunicationReferee_SM_R_Error
			[*] --> ChallengeEnv_CommunicationReferee_SM_R_Idle
			ChallengeEnv_CommunicationReferee_SM_R_Idle --> ChallengeEnv_CommunicationReferee_SM_R_Connection : / SET(this, connected, UML_TcpConnectionOpen(1, GET(this, tcpPort), FALSE));
			ChallengeEnv_CommunicationReferee_SM_R_Connection --> ChallengeEnv_CommunicationReferee_SM_R_Connected : [GET(this, connected) == 1] / SEND(GET(this, trajectoryManager), refereeConnected);
			ChallengeEnv_CommunicationReferee_SM_R_Connection --> ChallengeEnv_CommunicationReferee_SM_R_Error : [else]
			ChallengeEnv_CommunicationReferee_SM_R_Connected --> ChallengeEnv_CommunicationReferee_SM_R_CheckStatus : checkReferee / \nchar str[128] = {0}; SET(this, status, UML_TcpConnectionRead(1, str, 127));\nif(GET(this, status)) {\nchar * pch = strtok (str,'';'');\nbool possession = FALSE;\nbool timeout = FALSE;\nbool scored = FALSE;\nwhile (pch != NULL) {\nif(strcmp(pch, ''Possesion'') == 0) {\npossession = TRUE;\n} else if(strcmp(pch, ''TimeOut'') == 0) {\ntimeout = TRUE;\n} else if(strcmp(pch, ''scored'') == 0) {\nscored = TRUE;\n} else if(strcmp(pch, ''Done'') == 0) {\nSEND(GET(this, trajectoryManager), abort);\nSEND(GET(this, controller), done);\n} else if(strcmp(pch, ''player2'') == 0) {\nif(possession) {\npossession = FALSE;\nSEND(GET(this, trajectoryManager), possession);\n} else if(timeout) {\ntimeout = FALSE;\nSEND(GET(this, trajectoryManager), abort);\nSEND(GET(this, controller), timeout);\n}\n} else if(strcmp(pch, ''player1'') == 0) {\nif(scored) {\nscored = FALSE;\nSEND(GET(this, trajectoryManager), abort);\nSEND(GET(this, controller), opponentScored);\n}\n} else {\npossession = FALSE;\nscored = FALSE;\ntimeout = FALSE;\n}\npch = strtok (NULL,'';'');\n}\n}\nSEND(GET(this, trajectoryManager), refereeAck);\n
			ChallengeEnv_CommunicationReferee_SM_R_CheckStatus --> ChallengeEnv_CommunicationReferee_SM_R_Connected : [GET(this, status) != 0]
			ChallengeEnv_CommunicationReferee_SM_R_CheckStatus --> ChallengeEnv_CommunicationReferee_SM_R_Error : [else] / printf(''Connection in error'');
			ChallengeEnv_CommunicationReferee_SM_R_Error --> ChallengeEnv_CommunicationReferee_SM_R_Idle : / SET(this, connected, 0); UML_TcpConnectionClose(1);
		
	}
@enduml
