struct _IO_FILE {
	int                        _flags;               /*     0     4 */

	/* XXX 4 bytes hole, try to pack */

	char *                     _IO_read_ptr;         /*     8     8 */
	char *                     _IO_read_end;         /*    16     8 */
	char *                     _IO_read_base;        /*    24     8 */
	char *                     _IO_write_base;       /*    32     8 */
	char *                     _IO_write_ptr;        /*    40     8 */
	char *                     _IO_write_end;        /*    48     8 */
	char *                     _IO_buf_base;         /*    56     8 */
	/* --- cacheline 1 boundary (64 bytes) --- */
	char *                     _IO_buf_end;          /*    64     8 */
	char *                     _IO_save_base;        /*    72     8 */
	char *                     _IO_backup_base;      /*    80     8 */
	char *                     _IO_save_end;         /*    88     8 */
	struct _IO_marker *        _markers;             /*    96     8 */
	struct _IO_FILE *          _chain;               /*   104     8 */
	int                        _fileno;              /*   112     4 */
	int                        _flags2;              /*   116     4 */
	__off_t                    _old_offset;          /*   120     8 */
	/* --- cacheline 2 boundary (128 bytes) --- */
	short unsigned int         _cur_column;          /*   128     2 */
	signed char                _vtable_offset;       /*   130     1 */
	char                       _shortbuf[1];         /*   131     1 */

	/* XXX 4 bytes hole, try to pack */

	_IO_lock_t *               _lock;                /*   136     8 */
	__off64_t                  _offset;              /*   144     8 */
	void *                     __pad1;               /*   152     8 */
	void *                     __pad2;               /*   160     8 */
	void *                     __pad3;               /*   168     8 */
	void *                     __pad4;               /*   176     8 */
	size_t                     __pad5;               /*   184     8 */
	/* --- cacheline 3 boundary (192 bytes) --- */
	int                        _mode;                /*   192     4 */
	char                       _unused2[20];         /*   196    20 */

	/* size: 216, cachelines: 4, members: 29 */
	/* sum members: 208, holes: 2, sum holes: 8 */
	/* last cacheline: 24 bytes */
};
struct _IO_marker {
	struct _IO_marker *        _next;                /*     0     8 */
	struct _IO_FILE *          _sbuf;                /*     8     8 */
	int                        _pos;                 /*    16     4 */

	/* size: 24, cachelines: 1, members: 3 */
	/* padding: 4 */
	/* last cacheline: 24 bytes */
};
struct C_UML_Model {
	char *                     name;                 /*     0     8 */
	UML_Signal * *             uml_signal;           /*     8     8 */
	UML_SignalEvent * *        uml_signal_event;     /*    16     8 */
	UML_Class * *              uml_class;            /*    24     8 */
	UML_Association * *        uml_association;      /*    32     8 */

	/* size: 40, cachelines: 1, members: 5 */
	/* last cacheline: 40 bytes */
};
struct UML_Constraint {
	DescriptorType             c_type;               /*     0     4 */
	UML_VisibilityKind         visibility;           /*     4     4 */
	char *                     name;                 /*     8     8 */
	UML_ValueSpecification *   specification;        /*    16     8 */

	/* size: 24, cachelines: 1, members: 4 */
	/* last cacheline: 24 bytes */
};
struct UML_ConnectorEnd {
	DescriptorType             c_type;               /*     0     4 */
	int                        lower;                /*     4     4 */
	UML_Property *             role;                 /*     8     8 */
	UML_Property *             partWithPort;         /*    16     8 */

	/* size: 24, cachelines: 1, members: 4 */
	/* last cacheline: 24 bytes */
};
struct UML_SignalEvent {
	DescriptorType             c_type;               /*     0     4 */
	UML_VisibilityKind         visibility;           /*     4     4 */
	char *                     name;                 /*     8     8 */
	NbEnumerationLiteral_t     c_index;              /*    16     1 */

	/* XXX 7 bytes hole, try to pack */

	UML_Signal *               signal;               /*    24     8 */

	/* size: 32, cachelines: 1, members: 5 */
	/* sum members: 25, holes: 1, sum holes: 7 */
	/* last cacheline: 32 bytes */
};
struct UML_Connector {
	DescriptorType             c_type;               /*     0     4 */
	UML_VisibilityKind         visibility;           /*     4     4 */
	char *                     name;                 /*     8     8 */
	UML_ConnectorEnd *         end;                  /*    16     8 */
	UML_Association *          type;                 /*    24     8 */

	/* size: 32, cachelines: 1, members: 5 */
	/* last cacheline: 32 bytes */
};
struct UML_InterfaceRealization {
	DescriptorType             c_type;               /*     0     4 */

	/* XXX 4 bytes hole, try to pack */

	UML_Interface *            contract;             /*     8     8 */

	/* size: 16, cachelines: 1, members: 2 */
	/* sum members: 12, holes: 1, sum holes: 4 */
	/* last cacheline: 16 bytes */
};
struct UML_OpaqueExpression {
	DescriptorType             c_type;               /*     0     4 */
	UML_VisibilityKind         visibility;           /*     4     4 */
	char *                     name;                 /*     8     8 */
	void *                     c_function;           /*    16     8 */
	char * *                   language;             /*    24     8 */
	char * *                   body;                 /*    32     8 */

	/* size: 40, cachelines: 1, members: 6 */
	/* last cacheline: 40 bytes */
};
struct UML_Interface {
	DescriptorType             c_type;               /*     0     4 */
	UML_VisibilityKind         visibility;           /*     4     4 */
	char *                     name;                 /*     8     8 */
	C_UML_ClassifierKind       c_kind;               /*    16     4 */

	/* XXX 4 bytes hole, try to pack */

	UML_Property * *           ownedAttribute;       /*    24     8 */
	UML_Reception * *          ownedReception;       /*    32     8 */

	/* size: 40, cachelines: 1, members: 6 */
	/* sum members: 36, holes: 1, sum holes: 4 */
	/* last cacheline: 40 bytes */
};
struct UML_Reception {
	DescriptorType             c_type;               /*     0     4 */
	UML_VisibilityKind         visibility;           /*     4     4 */
	char *                     name;                 /*     8     8 */
	UML_Signal *               signal;               /*    16     8 */

	/* size: 24, cachelines: 1, members: 4 */
	/* last cacheline: 24 bytes */
};
struct UML_Pseudostate {
	DescriptorType             c_type;               /*     0     4 */
	UML_VisibilityKind         visibility;           /*     4     4 */
	char *                     name;                 /*     8     8 */
	C_UML_VertexKind           c_kind;               /*    16     4 */

	/* XXX 4 bytes hole, try to pack */

	UML_Transition * *         incoming;             /*    24     8 */
	UML_Transition * *         outgoing;             /*    32     8 */
	UML_PseudostateKind        kind;                 /*    40     4 */

	/* size: 48, cachelines: 1, members: 7 */
	/* sum members: 40, holes: 1, sum holes: 4 */
	/* padding: 4 */
	/* last cacheline: 48 bytes */
};
struct UML_Vertex {
	DescriptorType             c_type;               /*     0     4 */
	UML_VisibilityKind         visibility;           /*     4     4 */
	char *                     name;                 /*     8     8 */
	C_UML_VertexKind           c_kind;               /*    16     4 */

	/* XXX 4 bytes hole, try to pack */

	UML_Transition * *         incoming;             /*    24     8 */
	UML_Transition * *         outgoing;             /*    32     8 */

	/* size: 40, cachelines: 1, members: 6 */
	/* sum members: 36, holes: 1, sum holes: 4 */
	/* last cacheline: 40 bytes */
};
struct UML_Association {
	DescriptorType             c_type;               /*     0     4 */
	UML_VisibilityKind         visibility;           /*     4     4 */
	char *                     name;                 /*     8     8 */
	C_UML_ClassifierKind       c_kind;               /*    16     4 */

	/* XXX 4 bytes hole, try to pack */

	UML_Property * *           memberEnd;            /*    24     8 */
	UML_Property * *           ownedEnd;             /*    32     8 */

	/* size: 40, cachelines: 1, members: 6 */
	/* sum members: 36, holes: 1, sum holes: 4 */
	/* last cacheline: 40 bytes */
};
struct UML_ValueSpecification {
	DescriptorType             c_type;               /*     0     4 */

	/* size: 4, cachelines: 1, members: 1 */
	/* last cacheline: 4 bytes */
};
struct UML_Property {
	DescriptorType             c_type;               /*     0     4 */
	UML_VisibilityKind         visibility;           /*     4     4 */
	char *                     name;                 /*     8     8 */
	UML_Class *                type;                 /*    16     8 */
	int                        lower;                /*    24     4 */

	/* XXX 4 bytes hole, try to pack */

	UML_Association *          association;          /*    32     8 */
	UML_AggregationKind        aggregation;          /*    40     4 */

	/* XXX 4 bytes hole, try to pack */

	UML_Class *                class;                /*    48     8 */

	/* size: 56, cachelines: 1, members: 8 */
	/* sum members: 48, holes: 2, sum holes: 8 */
	/* last cacheline: 56 bytes */
};
struct UML_Transition {
	DescriptorType             c_type;               /*     0     4 */
	UML_VisibilityKind         visibility;           /*     4     4 */
	char *                     name;                 /*     8     8 */
	UML_Constraint *           guard;                /*    16     8 */
	UML_Behavior *             effect;               /*    24     8 */
	UML_Trigger *              trigger;              /*    32     8 */
	UML_Vertex *               source;               /*    40     8 */
	UML_Vertex *               target;               /*    48     8 */

	/* size: 56, cachelines: 1, members: 8 */
	/* last cacheline: 56 bytes */
};
struct UML_PrimitiveType {
	DescriptorType             c_type;               /*     0     4 */
	UML_VisibilityKind         visibility;           /*     4     4 */
	char *                     name;                 /*     8     8 */
	C_UML_ClassifierKind       c_kind;               /*    16     4 */

	/* size: 24, cachelines: 1, members: 4 */
	/* padding: 4 */
	/* last cacheline: 24 bytes */
};
struct UML_StateMachine {
	DescriptorType             c_type;               /*     0     4 */
	UML_VisibilityKind         visibility;           /*     4     4 */
	char *                     name;                 /*     8     8 */
	UML_Region * *             region;               /*    16     8 */

	/* size: 24, cachelines: 1, members: 4 */
	/* last cacheline: 24 bytes */
};
struct UML_Behavior {
	DescriptorType             c_type;               /*     0     4 */
	C_UML_BehaviorKind         c_kind;               /*     4     4 */

	/* size: 8, cachelines: 1, members: 2 */
	/* last cacheline: 8 bytes */
};
struct UML_OpaqueBehavior {
	DescriptorType             c_type;               /*     0     4 */
	UML_VisibilityKind         visibility;           /*     4     4 */
	char *                     name;                 /*     8     8 */
	C_UML_BehaviorKind         c_kind;               /*    16     4 */

	/* XXX 4 bytes hole, try to pack */

	void *                     c_function;           /*    24     8 */
	char * *                   language;             /*    32     8 */
	char * *                   body;                 /*    40     8 */

	/* size: 48, cachelines: 1, members: 7 */
	/* sum members: 44, holes: 1, sum holes: 4 */
	/* last cacheline: 48 bytes */
};
struct UML_State {
	DescriptorType             c_type;               /*     0     4 */
	UML_VisibilityKind         visibility;           /*     4     4 */
	char *                     name;                 /*     8     8 */
	C_UML_VertexKind           c_kind;               /*    16     4 */

	/* XXX 4 bytes hole, try to pack */

	UML_Transition * *         incoming;             /*    24     8 */
	UML_Transition * *         outgoing;             /*    32     8 */
	UML_Behavior *             entry;                /*    40     8 */
	UML_Behavior *             exit;                 /*    48     8 */
	UML_Trigger *              deferrableTrigger;    /*    56     8 */
	/* --- cacheline 1 boundary (64 bytes) --- */

	/* size: 64, cachelines: 1, members: 9 */
	/* sum members: 60, holes: 1, sum holes: 4 */
};
struct UML_Trigger {
	DescriptorType             c_type;               /*     0     4 */
	UML_VisibilityKind         visibility;           /*     4     4 */
	char *                     name;                 /*     8     8 */
	UML_Port * *               port;                 /*    16     8 */
	UML_SignalEvent *          event;                /*    24     8 */

	/* size: 32, cachelines: 1, members: 5 */
	/* last cacheline: 32 bytes */
};
struct UML_Signal {
	DescriptorType             c_type;               /*     0     4 */
	UML_VisibilityKind         visibility;           /*     4     4 */
	char *                     name;                 /*     8     8 */
	UML_Property * *           ownedAttribute;       /*    16     8 */

	/* size: 24, cachelines: 1, members: 4 */
	/* last cacheline: 24 bytes */
};
struct UML_Class {
	DescriptorType             c_type;               /*     0     4 */
	UML_VisibilityKind         visibility;           /*     4     4 */
	char *                     name;                 /*     8     8 */
	UML_Connector * *          ownedConnector;       /*    16     8 */
	UML_Property * *           ownedAttribute;       /*    24     8 */
	UML_Behavior *             classifierBehavior;   /*    32     8 */
	UML_InterfaceRealization * * interfaceRealization; /*    40     8 */
	UML_Port * *               ownedPort;            /*    48     8 */
	C_UML_ClassifierKind       c_kind;               /*    56     4 */

	/* XXX 4 bytes hole, try to pack */

	/* --- cacheline 1 boundary (64 bytes) --- */
	UML_Class * *              superClass;           /*    64     8 */
	_Bool                      isActive;             /*    72     1 */

	/* XXX 7 bytes hole, try to pack */

	UML_Reception * *          ownedReception;       /*    80     8 */

	/* size: 88, cachelines: 2, members: 12 */
	/* sum members: 77, holes: 2, sum holes: 11 */
	/* last cacheline: 24 bytes */
};
struct UML_Region {
	DescriptorType             c_type;               /*     0     4 */
	UML_VisibilityKind         visibility;           /*     4     4 */
	char *                     name;                 /*     8     8 */
	UML_Vertex * *             subvertex;            /*    16     8 */
	UML_Transition * *         transition;           /*    24     8 */

	/* size: 32, cachelines: 1, members: 5 */
	/* last cacheline: 32 bytes */
};
struct UML_Port {
	DescriptorType             c_type;               /*     0     4 */
	UML_VisibilityKind         visibility;           /*     4     4 */
	char *                     name;                 /*     8     8 */
	UML_Association *          association;          /*    16     8 */
	UML_AggregationKind        aggregation;          /*    24     4 */

	/* XXX 4 bytes hole, try to pack */

	UML_Class *                class;                /*    32     8 */
	UML_Class *                type;                 /*    40     8 */
	UML_ConnectorEnd *         end;                  /*    48     8 */
	int                        lower;                /*    56     4 */
	NbEnumerationLiteral_t     c_index;              /*    60     1 */
	_Bool                      isConjugated;         /*    61     1 */

	/* XXX 2 bytes hole, try to pack */

	/* --- cacheline 1 boundary (64 bytes) --- */
	UML_Interface * *          provided;             /*    64     8 */
	_Bool                      isBehavior;           /*    72     1 */

	/* XXX 7 bytes hole, try to pack */

	UML_Interface * *          required;             /*    80     8 */

	/* size: 88, cachelines: 2, members: 14 */
	/* sum members: 75, holes: 3, sum holes: 13 */
	/* last cacheline: 24 bytes */
};
struct Fifo {
	void * *                   data;                 /*     0     8 */
	uint8_t                    nb_layers;            /*     8     1 */

	/* XXX 7 bytes hole, try to pack */

	uint32_t *                 element_size;         /*    16     8 */
	NbFifoElements_t *         nb;                   /*    24     8 */
	NbFifoElements_t           size;                 /*    32     1 */
	NbFifoElements_t           writing;              /*    33     1 */

	/* XXX 6 bytes hole, try to pack */

	void *                     reorganize_buffer;    /*    40     8 */

	/* size: 48, cachelines: 1, members: 7 */
	/* sum members: 35, holes: 2, sum holes: 13 */
	/* last cacheline: 48 bytes */
};
struct EventPool {
	Fifo                       fifo;                 /*     0    48 */
	EventPoolMeta              meta;                 /*    48    24 */
	/* --- cacheline 1 boundary (64 bytes) was 8 bytes ago --- */

	/* size: 72, cachelines: 2, members: 2 */
	/* last cacheline: 8 bytes */
};
struct EventPoolStore {
	NbEvents_t                 nbEvents;             /*     0     1 */
	EventId                    eventOccurred[8];     /*     1    16 */

	/* size: 17, cachelines: 1, members: 2 */
	/* last cacheline: 17 bytes */
};
struct EventPoolMeta {
	EventSetSize_t             eventSetSize;         /*     0     1 */

	/* XXX 7 bytes hole, try to pack */

	UML_Signal * *             eventSet;             /*     8     8 */
	uint32_t                   paramsSize;           /*    16     4 */
	NbEvents_t                 nbDeferred;           /*    20     1 */

	/* size: 24, cachelines: 1, members: 4 */
	/* sum members: 14, holes: 1, sum holes: 7 */
	/* padding: 3 */
	/* last cacheline: 24 bytes */
};
struct EventId {
	NbSignalEvents_t           signalEventId;        /*     0     1 */
	NbPorts_t                  portId;               /*     1     1 */

	/* size: 2, cachelines: 1, members: 2 */
	/* last cacheline: 2 bytes */
};
struct ClassInfo {
	UML_Class *                type;                 /*     0     8 */

	/* size: 8, cachelines: 1, members: 1 */
	/* last cacheline: 8 bytes */
};
struct Object {
	char *                     name;                 /*     0     8 */
	ClassInfo *                classInfo;            /*     8     8 */
	UML_Property *             part;                 /*    16     8 */
	void *                     properties_ro;        /*    24     8 */
	NbPropertiesRO_t           nb_properties_ro;     /*    32     1 */

	/* XXX 7 bytes hole, try to pack */

	void *                     store;                /*    40     8 */
	void *                     operations;           /*    48     8 */
	ObjectMultiplicity_t       multiplicity_id;      /*    56     1 */

	/* size: 64, cachelines: 1, members: 8 */
	/* sum members: 50, holes: 1, sum holes: 7 */
	/* padding: 7 */
};
struct PassiveObject {
	char *                     name;                 /*     0     8 */
	ClassInfo *                classInfo;            /*     8     8 */
	UML_Property *             part;                 /*    16     8 */
	void *                     properties_ro;        /*    24     8 */
	NbPropertiesRO_t           nb_properties_ro;     /*    32     1 */

	/* XXX 7 bytes hole, try to pack */

	void *                     store;                /*    40     8 */
	void *                     operations;           /*    48     8 */
	ObjectMultiplicity_t       multiplicity_id;      /*    56     1 */

	/* XXX 7 bytes hole, try to pack */

	/* --- cacheline 1 boundary (64 bytes) --- */
	void *                     instance;             /*    64     8 */
	uint32_t                   instanceSize;         /*    72     4 */

	/* XXX 4 bytes hole, try to pack */

	void *                     properties_rw;        /*    80     8 */

	/* size: 88, cachelines: 2, members: 11 */
	/* sum members: 70, holes: 3, sum holes: 18 */
	/* last cacheline: 24 bytes */
};
struct ActiveObject {
	char *                     name;                 /*     0     8 */
	ClassInfo *                classInfo;            /*     8     8 */
	UML_Property *             part;                 /*    16     8 */
	void *                     properties_ro;        /*    24     8 */
	NbPropertiesRO_t           nb_properties_ro;     /*    32     1 */

	/* XXX 7 bytes hole, try to pack */

	void *                     store;                /*    40     8 */
	void *                     operations;           /*    48     8 */
	ObjectMultiplicity_t       multiplicity_id;      /*    56     1 */

	/* XXX 7 bytes hole, try to pack */

	/* --- cacheline 1 boundary (64 bytes) --- */
	void *                     instance;             /*    64     8 */
	uint32_t                   instanceSize;         /*    72     4 */

	/* XXX 4 bytes hole, try to pack */

	void *                     properties_rw;        /*    80     8 */
	UML_StateMachine *         stateMachine;         /*    88     8 */
	uint32_t                   eventParamsSize;      /*    96     4 */

	/* XXX 4 bytes hole, try to pack */

	EventPool *                eventPool;            /*   104     8 */
	void *                     reorganize_buffer;    /*   112     8 */
	NbOutgoings_t *            fireables;            /*   120     8 */
	/* --- cacheline 2 boundary (128 bytes) --- */
	NbFireables_t              nbFireables;          /*   128     1 */
	NbOutgoings_t              maxOutgoings;         /*   129     1 */
	NbFireables_t              fireablesMax;         /*   130     1 */
	FireablesLength_t          fireablesLength;      /*   131     1 */

	/* XXX 4 bytes hole, try to pack */

	uint32_t *                 store_cs;             /*   136     8 */
	void *                     store_ep_params;      /*   144     8 */
	_Bool                      in_environment;       /*   152     1 */

	/* size: 160, cachelines: 3, members: 23 */
	/* sum members: 127, holes: 5, sum holes: 26 */
	/* padding: 7 */
	/* last cacheline: 32 bytes */
};
struct connected_signal_parameters {

	/* size: 0, cachelines: 0, members: 0 */
};
struct goPos_signal_parameters {
	int8_t                     ball;                 /*     0     1 */

	/* XXX 3 bytes hole, try to pack */

	int32_t                    x;                    /*     4     4 */
	int32_t                    z;                    /*     8     4 */

	/* size: 12, cachelines: 1, members: 3 */
	/* sum members: 9, holes: 1, sum holes: 3 */
	/* last cacheline: 12 bytes */
};
struct goAngle_signal_parameters {
	int8_t                     ball;                 /*     0     1 */

	/* XXX 3 bytes hole, try to pack */

	int32_t                    x;                    /*     4     4 */
	int32_t                    z;                    /*     8     4 */

	/* size: 12, cachelines: 1, members: 3 */
	/* sum members: 9, holes: 1, sum holes: 3 */
	/* last cacheline: 12 bytes */
};
struct finish_signal_parameters {

	/* size: 0, cachelines: 0, members: 0 */
};
struct error_signal_parameters {

	/* size: 0, cachelines: 0, members: 0 */
};
struct moveForward_signal_parameters {
	int32_t                    speed;                /*     0     4 */

	/* size: 4, cachelines: 1, members: 1 */
	/* last cacheline: 4 bytes */
};
struct moveRight_signal_parameters {
	int32_t                    speed;                /*     0     4 */

	/* size: 4, cachelines: 1, members: 1 */
	/* last cacheline: 4 bytes */
};
struct spin_signal_parameters {
	int32_t                    speed;                /*     0     4 */
	int8_t                     stopAfter;            /*     4     1 */

	/* size: 8, cachelines: 1, members: 2 */
	/* padding: 3 */
	/* last cacheline: 8 bytes */
};
struct stop_signal_parameters {

	/* size: 0, cachelines: 0, members: 0 */
};
struct setSuction_signal_parameters {
	int32_t                    power;                /*     0     4 */

	/* size: 4, cachelines: 1, members: 1 */
	/* last cacheline: 4 bytes */
};
struct getSuction_signal_parameters {

	/* size: 0, cachelines: 0, members: 0 */
};
struct getPlayerGPS_signal_parameters {

	/* size: 0, cachelines: 0, members: 0 */
};
struct getBallGPS_signal_parameters {

	/* size: 0, cachelines: 0, members: 0 */
};
struct getCompass_signal_parameters {

	/* size: 0, cachelines: 0, members: 0 */
};
struct rspPlayerGPS_signal_parameters {
	int32_t                    x;                    /*     0     4 */
	int32_t                    z;                    /*     4     4 */

	/* size: 8, cachelines: 1, members: 2 */
	/* last cacheline: 8 bytes */
};
struct rspBallGPS_signal_parameters {
	int32_t                    x;                    /*     0     4 */
	int32_t                    z;                    /*     4     4 */

	/* size: 8, cachelines: 1, members: 2 */
	/* last cacheline: 8 bytes */
};
struct rspSuction_signal_parameters {
	int32_t                    power;                /*     0     4 */

	/* size: 4, cachelines: 1, members: 1 */
	/* last cacheline: 4 bytes */
};
struct rspCompass_signal_parameters {
	int32_t                    direction;            /*     0     4 */

	/* size: 4, cachelines: 1, members: 1 */
	/* last cacheline: 4 bytes */
};
struct playerConnected_signal_parameters {

	/* size: 0, cachelines: 0, members: 0 */
};
struct refereeConnected_signal_parameters {

	/* size: 0, cachelines: 0, members: 0 */
};
struct possession_signal_parameters {

	/* size: 0, cachelines: 0, members: 0 */
};
struct abort_signal_parameters {

	/* size: 0, cachelines: 0, members: 0 */
};
struct done_signal_parameters {

	/* size: 0, cachelines: 0, members: 0 */
};
struct opponentScored_signal_parameters {

	/* size: 0, cachelines: 0, members: 0 */
};
struct timeout_signal_parameters {

	/* size: 0, cachelines: 0, members: 0 */
};
struct refereeAck_signal_parameters {

	/* size: 0, cachelines: 0, members: 0 */
};
struct checkReferee_signal_parameters {

	/* size: 0, cachelines: 0, members: 0 */
};
struct TrajectoryManager_events {
	union {
		goPos_signal_parameters goPos_params;    /*          12 */
		goAngle_signal_parameters goAngle_params; /*          12 */
		rspPlayerGPS_signal_parameters rspPlayerGPS_params; /*           8 */
		rspBallGPS_signal_parameters rspBallGPS_params; /*           8 */
		rspCompass_signal_parameters rspCompass_params; /*           4 */
	};                                               /*     0    12 */

	/* size: 12, cachelines: 1, members: 1 */
	/* last cacheline: 12 bytes */
};
struct CommunicationPlayer_events {
	union {
		moveForward_signal_parameters moveForward_params; /*           4 */
		moveRight_signal_parameters moveRight_params; /*           4 */
		spin_signal_parameters spin_params;      /*           8 */
		setSuction_signal_parameters setSuction_params; /*           4 */
	};                                               /*     0     8 */

	/* size: 8, cachelines: 1, members: 1 */
	/* last cacheline: 8 bytes */
};
struct DirectionObserver_store {
	uint32_t                   cs;                   /*     0     4 */
	EventPoolStore             ep;                   /*     4    17 */

	/* size: 24, cachelines: 1, members: 2 */
	/* padding: 3 */
	/* last cacheline: 24 bytes */
};
struct DirectionObserver_od {

	/* size: 0, cachelines: 0, members: 0 */
};
struct System_store {

	/* size: 0, cachelines: 0, members: 0 */
};
struct System_od {

	/* size: 0, cachelines: 0, members: 0 */
};
struct ControllerToPlayerPortSys_store {

	/* size: 0, cachelines: 0, members: 0 */
};
struct ControllerToPlayerPortSys_od {

	/* size: 0, cachelines: 0, members: 0 */
};
struct ControllerToRefereePortSys_store {

	/* size: 0, cachelines: 0, members: 0 */
};
struct ControllerToRefereePortSys_od {

	/* size: 0, cachelines: 0, members: 0 */
};
struct TrajToPlayerPortSys_store {

	/* size: 0, cachelines: 0, members: 0 */
};
struct TrajToPlayerPortSys_od {

	/* size: 0, cachelines: 0, members: 0 */
};
struct TrajToRefereePortSys_store {

	/* size: 0, cachelines: 0, members: 0 */
};
struct TrajToRefereePortSys_od {

	/* size: 0, cachelines: 0, members: 0 */
};
struct Controller_store {
	uint32_t                   cs;                   /*     0     4 */
	EventPoolStore             ep;                   /*     4    17 */

	/* size: 24, cachelines: 1, members: 2 */
	/* padding: 3 */
	/* last cacheline: 24 bytes */
};
struct Controller_od {

	/* size: 0, cachelines: 0, members: 0 */
};
struct TrajectoryManager_store {
	uint32_t                   cs;                   /*     0     4 */
	EventPoolStore             ep;                   /*     4    17 */

	/* XXX 3 bytes hole, try to pack */

	TrajectoryManager_ep_params ep_params;           /*    24    96 */
	/* --- cacheline 1 boundary (64 bytes) was 56 bytes ago --- */
	TrajectoryManager_od       od;                   /*   120    52 */
	/* --- cacheline 2 boundary (128 bytes) was 44 bytes ago --- */

	/* size: 172, cachelines: 3, members: 4 */
	/* sum members: 169, holes: 1, sum holes: 3 */
	/* last cacheline: 44 bytes */
};
struct TrajectoryManager_ep_params {
	TrajectoryManager_events   eventOccurred[8];     /*     0    96 */
	/* --- cacheline 1 boundary (64 bytes) was 32 bytes ago --- */

	/* size: 96, cachelines: 2, members: 1 */
	/* last cacheline: 32 bytes */
};
struct TrajectoryManager_od {
	int32_t                    xPlayer;              /*     0     4 */
	int32_t                    zPlayer;              /*     4     4 */
	int32_t                    aPlayer;              /*     8     4 */
	int32_t                    xBall;                /*    12     4 */
	int32_t                    zBall;                /*    16     4 */
	int8_t                     xArrived;             /*    20     1 */
	int8_t                     zArrived;             /*    21     1 */
	int8_t                     aArrived;             /*    22     1 */

	/* XXX 1 byte hole, try to pack */

	int32_t                    trajectory;           /*    24     4 */
	int32_t                    xTarget;              /*    28     4 */
	int32_t                    zTarget;              /*    32     4 */
	int8_t                     ballTarget;           /*    36     1 */
	int8_t                     receivedBall;         /*    37     1 */
	int8_t                     receivedPlayer;       /*    38     1 */
	int8_t                     receivedCompass;      /*    39     1 */
	int8_t                     needTurn;             /*    40     1 */
	int8_t                     ballInRobot;          /*    41     1 */
	int8_t                     playerConnected;      /*    42     1 */
	int8_t                     refereeConnected;     /*    43     1 */
	int8_t                     error;                /*    44     1 */
	int8_t                     ack;                  /*    45     1 */

	/* XXX 2 bytes hole, try to pack */

	int32_t                    kp;                   /*    48     4 */

	/* size: 52, cachelines: 1, members: 22 */
	/* sum members: 49, holes: 2, sum holes: 3 */
	/* last cacheline: 52 bytes */
};
struct Main_store {

	/* size: 0, cachelines: 0, members: 0 */
};
struct Main_od {

	/* size: 0, cachelines: 0, members: 0 */
};
struct Environment_store {

	/* size: 0, cachelines: 0, members: 0 */
};
struct Environment_od {

	/* size: 0, cachelines: 0, members: 0 */
};
struct ControllerToPlayerPortEnv_store {

	/* size: 0, cachelines: 0, members: 0 */
};
struct ControllerToPlayerPortEnv_od {

	/* size: 0, cachelines: 0, members: 0 */
};
struct ControllerToRefereePortEnv_store {

	/* size: 0, cachelines: 0, members: 0 */
};
struct ControllerToRefereePortEnv_od {

	/* size: 0, cachelines: 0, members: 0 */
};
struct TrajToPlayerPortEnv_store {

	/* size: 0, cachelines: 0, members: 0 */
};
struct TrajToPlayerPortEnv_od {

	/* size: 0, cachelines: 0, members: 0 */
};
struct TrajToRefereePortEnv_store {

	/* size: 0, cachelines: 0, members: 0 */
};
struct TrajToRefereePortEnv_od {

	/* size: 0, cachelines: 0, members: 0 */
};
struct CommunicationPlayer_store {
	uint32_t                   cs;                   /*     0     4 */
	EventPoolStore             ep;                   /*     4    17 */

	/* XXX 3 bytes hole, try to pack */

	CommunicationPlayer_ep_params ep_params;         /*    24    64 */
	/* --- cacheline 1 boundary (64 bytes) was 24 bytes ago --- */
	CommunicationPlayer_od     od;                   /*    88    12 */

	/* size: 100, cachelines: 2, members: 4 */
	/* sum members: 97, holes: 1, sum holes: 3 */
	/* last cacheline: 36 bytes */
};
struct CommunicationPlayer_ep_params {
	CommunicationPlayer_events eventOccurred[8];     /*     0    64 */
	/* --- cacheline 1 boundary (64 bytes) --- */

	/* size: 64, cachelines: 1, members: 1 */
};
struct CommunicationPlayer_od {
	int32_t                    tcpPort;              /*     0     4 */
	int32_t                    connected;            /*     4     4 */
	int32_t                    status;               /*     8     4 */

	/* size: 12, cachelines: 1, members: 3 */
	/* last cacheline: 12 bytes */
};
struct CommunicationReferee_store {
	uint32_t                   cs;                   /*     0     4 */
	EventPoolStore             ep;                   /*     4    17 */

	/* XXX 3 bytes hole, try to pack */

	CommunicationReferee_od    od;                   /*    24    12 */

	/* size: 36, cachelines: 1, members: 3 */
	/* sum members: 33, holes: 1, sum holes: 3 */
	/* last cacheline: 36 bytes */
};
struct CommunicationReferee_od {
	int32_t                    tcpPort;              /*     0     4 */
	int32_t                    connected;            /*     4     4 */
	int32_t                    status;               /*     8     4 */

	/* size: 12, cachelines: 1, members: 3 */
	/* last cacheline: 12 bytes */
};
struct Store {
	uint32_t                   scheduling_state;     /*     0     4 */
	Main_store                 instMain;             /*     4     0 */
	System_store               instMain_system;      /*     4     0 */
	Controller_store           instMain_system_controller; /*     4    24 */
	TrajectoryManager_store    instMain_system_trajectoryManager; /*    28   172 */
	/* --- cacheline 3 boundary (192 bytes) was 8 bytes ago --- */
	ControllerToPlayerPortSys_store instMain_system_controllerToPlayerPortSys; /*   200     0 */
	ControllerToRefereePortSys_store instMain_system_controllerToRefereePortSys; /*   200     0 */
	TrajToPlayerPortSys_store  instMain_system_trajToPlayerPortSys; /*   200     0 */
	TrajToRefereePortSys_store instMain_system_trajToRefereePortSys; /*   200     0 */
	Environment_store          instMain_environment; /*   200     0 */
	CommunicationPlayer_store  instMain_environment_player; /*   200   100 */
	/* --- cacheline 4 boundary (256 bytes) was 44 bytes ago --- */
	CommunicationReferee_store instMain_environment_referee; /*   300    36 */
	/* --- cacheline 5 boundary (320 bytes) was 16 bytes ago --- */
	ControllerToPlayerPortEnv_store instMain_environment_controllerToPlayerPortEnv; /*   336     0 */
	ControllerToRefereePortEnv_store instMain_environment_controllerToRefereePortEnv; /*   336     0 */
	TrajToPlayerPortEnv_store  instMain_environment_trajToPlayerPortEnv; /*   336     0 */
	TrajToRefereePortEnv_store instMain_environment_trajToRefereePortEnv; /*   336     0 */

	/* size: 336, cachelines: 6, members: 16 */
	/* last cacheline: 16 bytes */
};
struct SignalEvents {
	UML_SignalEvent *          connected;            /*     0     8 */
	UML_SignalEvent *          goPos;                /*     8     8 */
	UML_SignalEvent *          goAngle;              /*    16     8 */
	UML_SignalEvent *          finish;               /*    24     8 */
	UML_SignalEvent *          error;                /*    32     8 */
	UML_SignalEvent *          moveForward;          /*    40     8 */
	UML_SignalEvent *          moveRight;            /*    48     8 */
	UML_SignalEvent *          spin;                 /*    56     8 */
	/* --- cacheline 1 boundary (64 bytes) --- */
	UML_SignalEvent *          stop;                 /*    64     8 */
	UML_SignalEvent *          setSuction;           /*    72     8 */
	UML_SignalEvent *          getSuction;           /*    80     8 */
	UML_SignalEvent *          getPlayerGPS;         /*    88     8 */
	UML_SignalEvent *          getBallGPS;           /*    96     8 */
	UML_SignalEvent *          getCompass;           /*   104     8 */
	UML_SignalEvent *          rspPlayerGPS;         /*   112     8 */
	UML_SignalEvent *          rspBallGPS;           /*   120     8 */
	/* --- cacheline 2 boundary (128 bytes) --- */
	UML_SignalEvent *          rspSuction;           /*   128     8 */
	UML_SignalEvent *          rspCompass;           /*   136     8 */
	UML_SignalEvent *          playerConnected;      /*   144     8 */
	UML_SignalEvent *          refereeConnected;     /*   152     8 */
	UML_SignalEvent *          possession;           /*   160     8 */
	UML_SignalEvent *          abort;                /*   168     8 */
	UML_SignalEvent *          done;                 /*   176     8 */
	UML_SignalEvent *          opponentScored;       /*   184     8 */
	/* --- cacheline 3 boundary (192 bytes) --- */
	UML_SignalEvent *          timeout;              /*   192     8 */
	UML_SignalEvent *          refereeAck;           /*   200     8 */
	UML_SignalEvent *          checkReferee;         /*   208     8 */

	/* size: 216, cachelines: 4, members: 27 */
	/* last cacheline: 24 bytes */
};
struct TrajToRefereePortEnv_properties_ro {
	TrajToRefereePortSys_Object * trajToRefereePortSys; /*     0     8 */
	CommunicationReferee_Object * referee;           /*     8     8 */

	/* size: 16, cachelines: 1, members: 2 */
	/* last cacheline: 16 bytes */
};
struct ControllerToPlayerPortSys_properties_ro {
	ControllerToPlayerPortEnv_Object * controllerToPlayerPortEnv; /*     0     8 */
	Controller_Object *        controller;           /*     8     8 */

	/* size: 16, cachelines: 1, members: 2 */
	/* last cacheline: 16 bytes */
};
struct TrajToPlayerPortSys_properties_ro {
	TrajectoryManager_Object * trajectoryManager;    /*     0     8 */
	TrajToPlayerPortEnv_Object * trajToPlayerPortEnv; /*     8     8 */

	/* size: 16, cachelines: 1, members: 2 */
	/* last cacheline: 16 bytes */
};
struct Main_properties_ro {
	Environment_Object *       environment;          /*     0     8 */
	System_Object *            system;               /*     8     8 */

	/* size: 16, cachelines: 1, members: 2 */
	/* last cacheline: 16 bytes */
};
struct Obs_properties_ro {
	DirectionObserver_Object * observer;             /*     0     8 */

	/* size: 8, cachelines: 1, members: 1 */
	/* last cacheline: 8 bytes */
};
struct Controller_properties_ro {
	TrajectoryManager_Object * trajectoryManager;    /*     0     8 */
	ControllerToPlayerPortSys_Object * player;       /*     8     8 */
	ControllerToRefereePortSys_Object * referee;     /*    16     8 */

	/* size: 24, cachelines: 1, members: 3 */
	/* last cacheline: 24 bytes */
};
struct TrajectoryManager_properties_ro {
	TrajToPlayerPortSys_Object * player;             /*     0     8 */
	TrajToRefereePortSys_Object * referee;           /*     8     8 */
	Controller_Object *        controller;           /*    16     8 */

	/* size: 24, cachelines: 1, members: 3 */
	/* last cacheline: 24 bytes */
};
struct DirectionObserver_properties_ro {

	/* size: 0, cachelines: 0, members: 0 */
};
struct ControllerToRefereePortEnv_properties_ro {
	ControllerToRefereePortSys_Object * controllerToRefereePortSys; /*     0     8 */
	CommunicationReferee_Object * referee;           /*     8     8 */

	/* size: 16, cachelines: 1, members: 2 */
	/* last cacheline: 16 bytes */
};
struct CommunicationReferee_properties_ro {
	TrajToRefereePortEnv_Object * trajectoryManager; /*     0     8 */
	ControllerToRefereePortEnv_Object * controller;  /*     8     8 */

	/* size: 16, cachelines: 1, members: 2 */
	/* last cacheline: 16 bytes */
};
struct ControllerToRefereePortSys_properties_ro {
	ControllerToRefereePortEnv_Object * controllerToRefereePortEnv; /*     0     8 */
	Controller_Object *        controller;           /*     8     8 */

	/* size: 16, cachelines: 1, members: 2 */
	/* last cacheline: 16 bytes */
};
struct TrajToPlayerPortEnv_properties_ro {
	TrajToPlayerPortSys_Object * trajToPlayerPortSys; /*     0     8 */
	CommunicationPlayer_Object * player;             /*     8     8 */

	/* size: 16, cachelines: 1, members: 2 */
	/* last cacheline: 16 bytes */
};
struct ControllerToPlayerPortEnv_properties_ro {
	CommunicationPlayer_Object * player;             /*     0     8 */
	ControllerToPlayerPortSys_Object * controllerToPlayerPortSys; /*     8     8 */

	/* size: 16, cachelines: 1, members: 2 */
	/* last cacheline: 16 bytes */
};
struct CommunicationPlayer_properties_ro {
	ControllerToPlayerPortEnv_Object * controller;   /*     0     8 */
	TrajToPlayerPortEnv_Object * trajectoryManager;  /*     8     8 */

	/* size: 16, cachelines: 1, members: 2 */
	/* last cacheline: 16 bytes */
};
struct TrajToRefereePortSys_properties_ro {
	TrajToRefereePortEnv_Object * trajToRefereePortEnv; /*     0     8 */
	TrajectoryManager_Object * trajectoryManager;    /*     8     8 */

	/* size: 16, cachelines: 1, members: 2 */
	/* last cacheline: 16 bytes */
};
struct Environment_properties_ro {
	TrajToPlayerPortEnv_Object * trajToPlayerPortEnv; /*     0     8 */
	CommunicationReferee_Object * referee;           /*     8     8 */
	ControllerToRefereePortEnv_Object * controllerToRefereePortEnv; /*    16     8 */
	CommunicationPlayer_Object * player;             /*    24     8 */
	TrajToRefereePortEnv_Object * trajToRefereePortEnv; /*    32     8 */
	ControllerToPlayerPortEnv_Object * controllerToPlayerPortEnv; /*    40     8 */

	/* size: 48, cachelines: 1, members: 6 */
	/* last cacheline: 48 bytes */
};
struct System_properties_ro {
	TrajectoryManager_Object * trajectoryManager;    /*     0     8 */
	TrajToPlayerPortSys_Object * trajToPlayerPortSys; /*     8     8 */
	ControllerToRefereePortSys_Object * controllerToRefereePortSys; /*    16     8 */
	TrajToRefereePortSys_Object * trajToRefereePortSys; /*    24     8 */
	Controller_Object *        controller;           /*    32     8 */
	ControllerToPlayerPortSys_Object * controllerToPlayerPortSys; /*    40     8 */

	/* size: 48, cachelines: 1, members: 6 */
	/* last cacheline: 48 bytes */
};
struct PropertiesRO {
	Main_properties_ro         instMain;             /*     0    16 */
	System_properties_ro       instMain_system;      /*    16    48 */
	/* --- cacheline 1 boundary (64 bytes) --- */
	Controller_properties_ro   instMain_system_controller; /*    64    24 */
	TrajectoryManager_properties_ro instMain_system_trajectoryManager; /*    88    24 */
	ControllerToPlayerPortSys_properties_ro instMain_system_controllerToPlayerPortSys; /*   112    16 */
	/* --- cacheline 2 boundary (128 bytes) --- */
	ControllerToRefereePortSys_properties_ro instMain_system_controllerToRefereePortSys; /*   128    16 */
	TrajToPlayerPortSys_properties_ro instMain_system_trajToPlayerPortSys; /*   144    16 */
	TrajToRefereePortSys_properties_ro instMain_system_trajToRefereePortSys; /*   160    16 */
	Environment_properties_ro  instMain_environment; /*   176    48 */
	/* --- cacheline 3 boundary (192 bytes) was 32 bytes ago --- */
	CommunicationPlayer_properties_ro instMain_environment_player; /*   224    16 */
	CommunicationReferee_properties_ro instMain_environment_referee; /*   240    16 */
	/* --- cacheline 4 boundary (256 bytes) --- */
	ControllerToPlayerPortEnv_properties_ro instMain_environment_controllerToPlayerPortEnv; /*   256    16 */
	ControllerToRefereePortEnv_properties_ro instMain_environment_controllerToRefereePortEnv; /*   272    16 */
	TrajToPlayerPortEnv_properties_ro instMain_environment_trajToPlayerPortEnv; /*   288    16 */
	TrajToRefereePortEnv_properties_ro instMain_environment_trajToRefereePortEnv; /*   304    16 */
	/* --- cacheline 5 boundary (320 bytes) --- */

	/* size: 320, cachelines: 5, members: 15 */
};
struct Obs_mutability {
	_Bool                      observer_isMutable:1; /*     0: 7  1 */

	/* size: 1, cachelines: 1, members: 1 */
	/* bit_padding: 7 bits */
	/* last cacheline: 1 bytes */
};
struct DirectionObserver_mutability {

	/* size: 0, cachelines: 0, members: 0 */
};
struct System_mutability {
	_Bool                      trajectoryManager_isMutable:1; /*     0: 7  1 */
	_Bool                      trajToPlayerPortSys_isMutable:1; /*     0: 6  1 */
	_Bool                      controllerToRefereePortSys_isMutable:1; /*     0: 5  1 */
	_Bool                      trajToRefereePortSys_isMutable:1; /*     0: 4  1 */
	_Bool                      controller_isMutable:1; /*     0: 3  1 */
	_Bool                      controllerToPlayerPortSys_isMutable:1; /*     0: 2  1 */

	/* size: 1, cachelines: 1, members: 6 */
	/* bit_padding: 2 bits */
	/* last cacheline: 1 bytes */
};
struct ControllerToPlayerPortSys_mutability {
	_Bool                      controllerToPlayerPortEnv_isMutable:1; /*     0: 7  1 */
	_Bool                      controller_isMutable:1; /*     0: 6  1 */

	/* size: 1, cachelines: 1, members: 2 */
	/* bit_padding: 6 bits */
	/* last cacheline: 1 bytes */
};
struct ControllerToRefereePortSys_mutability {
	_Bool                      controllerToRefereePortEnv_isMutable:1; /*     0: 7  1 */
	_Bool                      controller_isMutable:1; /*     0: 6  1 */

	/* size: 1, cachelines: 1, members: 2 */
	/* bit_padding: 6 bits */
	/* last cacheline: 1 bytes */
};
struct TrajToPlayerPortSys_mutability {
	_Bool                      trajectoryManager_isMutable:1; /*     0: 7  1 */
	_Bool                      trajToPlayerPortEnv_isMutable:1; /*     0: 6  1 */

	/* size: 1, cachelines: 1, members: 2 */
	/* bit_padding: 6 bits */
	/* last cacheline: 1 bytes */
};
struct TrajToRefereePortSys_mutability {
	_Bool                      trajToRefereePortEnv_isMutable:1; /*     0: 7  1 */
	_Bool                      trajectoryManager_isMutable:1; /*     0: 6  1 */

	/* size: 1, cachelines: 1, members: 2 */
	/* bit_padding: 6 bits */
	/* last cacheline: 1 bytes */
};
struct Controller_mutability {
	_Bool                      trajectoryManager_isMutable:1; /*     0: 7  1 */
	_Bool                      player_isMutable:1;   /*     0: 6  1 */
	_Bool                      referee_isMutable:1;  /*     0: 5  1 */

	/* size: 1, cachelines: 1, members: 3 */
	/* bit_padding: 5 bits */
	/* last cacheline: 1 bytes */
};
struct TrajectoryManager_mutability {
	_Bool                      player_isMutable:1;   /*     0: 7  1 */
	_Bool                      referee_isMutable:1;  /*     0: 6  1 */
	_Bool                      controller_isMutable:1; /*     0: 5  1 */
	_Bool                      xPlayer_isMutable:1;  /*     0: 4  1 */
	_Bool                      zPlayer_isMutable:1;  /*     0: 3  1 */
	_Bool                      aPlayer_isMutable:1;  /*     0: 2  1 */
	_Bool                      xBall_isMutable:1;    /*     0: 1  1 */
	_Bool                      zBall_isMutable:1;    /*     0: 0  1 */
	_Bool                      xArrived_isMutable:1; /*     1: 7  1 */
	_Bool                      zArrived_isMutable:1; /*     1: 6  1 */
	_Bool                      aArrived_isMutable:1; /*     1: 5  1 */
	_Bool                      trajectory_isMutable:1; /*     1: 4  1 */
	_Bool                      xTarget_isMutable:1;  /*     1: 3  1 */
	_Bool                      zTarget_isMutable:1;  /*     1: 2  1 */
	_Bool                      ballTarget_isMutable:1; /*     1: 1  1 */
	_Bool                      receivedBall_isMutable:1; /*     1: 0  1 */
	_Bool                      receivedPlayer_isMutable:1; /*     2: 7  1 */
	_Bool                      receivedCompass_isMutable:1; /*     2: 6  1 */
	_Bool                      needTurn_isMutable:1; /*     2: 5  1 */
	_Bool                      ballInRobot_isMutable:1; /*     2: 4  1 */
	_Bool                      playerConnected_isMutable:1; /*     2: 3  1 */
	_Bool                      refereeConnected_isMutable:1; /*     2: 2  1 */
	_Bool                      error_isMutable:1;    /*     2: 1  1 */
	_Bool                      ack_isMutable:1;      /*     2: 0  1 */
	_Bool                      kp_isMutable:1;       /*     3: 7  1 */

	/* size: 4, cachelines: 1, members: 25 */
	/* bit_padding: 7 bits */
	/* last cacheline: 4 bytes */
};
struct Main_mutability {
	_Bool                      environment_isMutable:1; /*     0: 7  1 */
	_Bool                      system_isMutable:1;   /*     0: 6  1 */

	/* size: 1, cachelines: 1, members: 2 */
	/* bit_padding: 6 bits */
	/* last cacheline: 1 bytes */
};
struct Environment_mutability {
	_Bool                      trajToPlayerPortEnv_isMutable:1; /*     0: 7  1 */
	_Bool                      referee_isMutable:1;  /*     0: 6  1 */
	_Bool                      controllerToRefereePortEnv_isMutable:1; /*     0: 5  1 */
	_Bool                      player_isMutable:1;   /*     0: 4  1 */
	_Bool                      trajToRefereePortEnv_isMutable:1; /*     0: 3  1 */
	_Bool                      controllerToPlayerPortEnv_isMutable:1; /*     0: 2  1 */

	/* size: 1, cachelines: 1, members: 6 */
	/* bit_padding: 2 bits */
	/* last cacheline: 1 bytes */
};
struct ControllerToPlayerPortEnv_mutability {
	_Bool                      player_isMutable:1;   /*     0: 7  1 */
	_Bool                      controllerToPlayerPortSys_isMutable:1; /*     0: 6  1 */

	/* size: 1, cachelines: 1, members: 2 */
	/* bit_padding: 6 bits */
	/* last cacheline: 1 bytes */
};
struct ControllerToRefereePortEnv_mutability {
	_Bool                      controllerToRefereePortSys_isMutable:1; /*     0: 7  1 */
	_Bool                      referee_isMutable:1;  /*     0: 6  1 */

	/* size: 1, cachelines: 1, members: 2 */
	/* bit_padding: 6 bits */
	/* last cacheline: 1 bytes */
};
struct TrajToPlayerPortEnv_mutability {
	_Bool                      trajToPlayerPortSys_isMutable:1; /*     0: 7  1 */
	_Bool                      player_isMutable:1;   /*     0: 6  1 */

	/* size: 1, cachelines: 1, members: 2 */
	/* bit_padding: 6 bits */
	/* last cacheline: 1 bytes */
};
struct TrajToRefereePortEnv_mutability {
	_Bool                      trajToRefereePortSys_isMutable:1; /*     0: 7  1 */
	_Bool                      referee_isMutable:1;  /*     0: 6  1 */

	/* size: 1, cachelines: 1, members: 2 */
	/* bit_padding: 6 bits */
	/* last cacheline: 1 bytes */
};
struct CommunicationPlayer_mutability {
	_Bool                      controller_isMutable:1; /*     0: 7  1 */
	_Bool                      trajectoryManager_isMutable:1; /*     0: 6  1 */
	_Bool                      tcpPort_isMutable:1;  /*     0: 5  1 */
	_Bool                      connected_isMutable:1; /*     0: 4  1 */
	_Bool                      status_isMutable:1;   /*     0: 3  1 */

	/* size: 1, cachelines: 1, members: 5 */
	/* bit_padding: 3 bits */
	/* last cacheline: 1 bytes */
};
struct CommunicationReferee_mutability {
	_Bool                      trajectoryManager_isMutable:1; /*     0: 7  1 */
	_Bool                      controller_isMutable:1; /*     0: 6  1 */
	_Bool                      tcpPort_isMutable:1;  /*     0: 5  1 */
	_Bool                      connected_isMutable:1; /*     0: 4  1 */
	_Bool                      status_isMutable:1;   /*     0: 3  1 */

	/* size: 1, cachelines: 1, members: 5 */
	/* bit_padding: 3 bits */
	/* last cacheline: 1 bytes */
};
struct TrajFromPlayerProvider_mutability {

	/* size: 0, cachelines: 0, members: 0 */
};
struct TrajFromPlayerUser_mutability {

	/* size: 0, cachelines: 0, members: 0 */
};
struct TrajFromRefereeProvider_mutability {

	/* size: 0, cachelines: 0, members: 0 */
};
struct TrajFromRefereeUser_mutability {

	/* size: 0, cachelines: 0, members: 0 */
};
struct TrajToPlayerProvider_mutability {

	/* size: 0, cachelines: 0, members: 0 */
};
struct TrajToPlayerUser_mutability {

	/* size: 0, cachelines: 0, members: 0 */
};
struct TrajToRefereeProvider_mutability {

	/* size: 0, cachelines: 0, members: 0 */
};
struct TrajToRefereeUser_mutability {

	/* size: 0, cachelines: 0, members: 0 */
};
struct ControllerFromRefereeProvider_mutability {

	/* size: 0, cachelines: 0, members: 0 */
};
struct ControllerFromRefereeUser_mutability {

	/* size: 0, cachelines: 0, members: 0 */
};
struct RefereeUser_mutability {

	/* size: 0, cachelines: 0, members: 0 */
};
struct PlayerUser_mutability {

	/* size: 0, cachelines: 0, members: 0 */
};
struct TrajUser_mutability {

	/* size: 0, cachelines: 0, members: 0 */
};
struct Obs_PropertiesTypes {
	Obs_properties_ro *        observer_type;        /*     0     8 */

	/* size: 8, cachelines: 1, members: 1 */
	/* last cacheline: 8 bytes */
};
struct DirectionObserver_PropertiesTypes {

	/* size: 0, cachelines: 0, members: 0 */
};
struct System_PropertiesTypes {
	System_properties_ro *     trajectoryManager_type; /*     0     8 */
	System_properties_ro *     trajToPlayerPortSys_type; /*     8     8 */
	System_properties_ro *     controllerToRefereePortSys_type; /*    16     8 */
	System_properties_ro *     trajToRefereePortSys_type; /*    24     8 */
	System_properties_ro *     controller_type;      /*    32     8 */
	System_properties_ro *     controllerToPlayerPortSys_type; /*    40     8 */

	/* size: 48, cachelines: 1, members: 6 */
	/* last cacheline: 48 bytes */
};
struct ControllerToPlayerPortSys_PropertiesTypes {
	ControllerToPlayerPortSys_properties_ro * controllerToPlayerPortEnv_type; /*     0     8 */
	ControllerToPlayerPortSys_properties_ro * controller_type; /*     8     8 */

	/* size: 16, cachelines: 1, members: 2 */
	/* last cacheline: 16 bytes */
};
struct ControllerToRefereePortSys_PropertiesTypes {
	ControllerToRefereePortSys_properties_ro * controllerToRefereePortEnv_type; /*     0     8 */
	ControllerToRefereePortSys_properties_ro * controller_type; /*     8     8 */

	/* size: 16, cachelines: 1, members: 2 */
	/* last cacheline: 16 bytes */
};
struct TrajToPlayerPortSys_PropertiesTypes {
	TrajToPlayerPortSys_properties_ro * trajectoryManager_type; /*     0     8 */
	TrajToPlayerPortSys_properties_ro * trajToPlayerPortEnv_type; /*     8     8 */

	/* size: 16, cachelines: 1, members: 2 */
	/* last cacheline: 16 bytes */
};
struct TrajToRefereePortSys_PropertiesTypes {
	TrajToRefereePortSys_properties_ro * trajToRefereePortEnv_type; /*     0     8 */
	TrajToRefereePortSys_properties_ro * trajectoryManager_type; /*     8     8 */

	/* size: 16, cachelines: 1, members: 2 */
	/* last cacheline: 16 bytes */
};
struct Controller_PropertiesTypes {
	Controller_properties_ro * trajectoryManager_type; /*     0     8 */
	Controller_properties_ro * player_type;          /*     8     8 */
	Controller_properties_ro * referee_type;         /*    16     8 */

	/* size: 24, cachelines: 1, members: 3 */
	/* last cacheline: 24 bytes */
};
struct TrajectoryManager_PropertiesTypes {
	TrajectoryManager_properties_ro * player_type;   /*     0     8 */
	TrajectoryManager_properties_ro * referee_type;  /*     8     8 */
	TrajectoryManager_properties_ro * controller_type; /*    16     8 */
	TrajectoryManager_od *     xPlayer_type;         /*    24     8 */
	TrajectoryManager_od *     zPlayer_type;         /*    32     8 */
	TrajectoryManager_od *     aPlayer_type;         /*    40     8 */
	TrajectoryManager_od *     xBall_type;           /*    48     8 */
	TrajectoryManager_od *     zBall_type;           /*    56     8 */
	/* --- cacheline 1 boundary (64 bytes) --- */
	TrajectoryManager_od *     xArrived_type;        /*    64     8 */
	TrajectoryManager_od *     zArrived_type;        /*    72     8 */
	TrajectoryManager_od *     aArrived_type;        /*    80     8 */
	TrajectoryManager_od *     trajectory_type;      /*    88     8 */
	TrajectoryManager_od *     xTarget_type;         /*    96     8 */
	TrajectoryManager_od *     zTarget_type;         /*   104     8 */
	TrajectoryManager_od *     ballTarget_type;      /*   112     8 */
	TrajectoryManager_od *     receivedBall_type;    /*   120     8 */
	/* --- cacheline 2 boundary (128 bytes) --- */
	TrajectoryManager_od *     receivedPlayer_type;  /*   128     8 */
	TrajectoryManager_od *     receivedCompass_type; /*   136     8 */
	TrajectoryManager_od *     needTurn_type;        /*   144     8 */
	TrajectoryManager_od *     ballInRobot_type;     /*   152     8 */
	TrajectoryManager_od *     playerConnected_type; /*   160     8 */
	TrajectoryManager_od *     refereeConnected_type; /*   168     8 */
	TrajectoryManager_od *     error_type;           /*   176     8 */
	TrajectoryManager_od *     ack_type;             /*   184     8 */
	/* --- cacheline 3 boundary (192 bytes) --- */
	TrajectoryManager_od *     kp_type;              /*   192     8 */

	/* size: 200, cachelines: 4, members: 25 */
	/* last cacheline: 8 bytes */
};
struct Main_PropertiesTypes {
	Main_properties_ro *       environment_type;     /*     0     8 */
	Main_properties_ro *       system_type;          /*     8     8 */

	/* size: 16, cachelines: 1, members: 2 */
	/* last cacheline: 16 bytes */
};
struct Environment_PropertiesTypes {
	Environment_properties_ro * trajToPlayerPortEnv_type; /*     0     8 */
	Environment_properties_ro * referee_type;        /*     8     8 */
	Environment_properties_ro * controllerToRefereePortEnv_type; /*    16     8 */
	Environment_properties_ro * player_type;         /*    24     8 */
	Environment_properties_ro * trajToRefereePortEnv_type; /*    32     8 */
	Environment_properties_ro * controllerToPlayerPortEnv_type; /*    40     8 */

	/* size: 48, cachelines: 1, members: 6 */
	/* last cacheline: 48 bytes */
};
struct ControllerToPlayerPortEnv_PropertiesTypes {
	ControllerToPlayerPortEnv_properties_ro * player_type; /*     0     8 */
	ControllerToPlayerPortEnv_properties_ro * controllerToPlayerPortSys_type; /*     8     8 */

	/* size: 16, cachelines: 1, members: 2 */
	/* last cacheline: 16 bytes */
};
struct ControllerToRefereePortEnv_PropertiesTypes {
	ControllerToRefereePortEnv_properties_ro * controllerToRefereePortSys_type; /*     0     8 */
	ControllerToRefereePortEnv_properties_ro * referee_type; /*     8     8 */

	/* size: 16, cachelines: 1, members: 2 */
	/* last cacheline: 16 bytes */
};
struct TrajToPlayerPortEnv_PropertiesTypes {
	TrajToPlayerPortEnv_properties_ro * trajToPlayerPortSys_type; /*     0     8 */
	TrajToPlayerPortEnv_properties_ro * player_type; /*     8     8 */

	/* size: 16, cachelines: 1, members: 2 */
	/* last cacheline: 16 bytes */
};
struct TrajToRefereePortEnv_PropertiesTypes {
	TrajToRefereePortEnv_properties_ro * trajToRefereePortSys_type; /*     0     8 */
	TrajToRefereePortEnv_properties_ro * referee_type; /*     8     8 */

	/* size: 16, cachelines: 1, members: 2 */
	/* last cacheline: 16 bytes */
};
struct CommunicationPlayer_PropertiesTypes {
	CommunicationPlayer_properties_ro * controller_type; /*     0     8 */
	CommunicationPlayer_properties_ro * trajectoryManager_type; /*     8     8 */
	CommunicationPlayer_od *   tcpPort_type;         /*    16     8 */
	CommunicationPlayer_od *   connected_type;       /*    24     8 */
	CommunicationPlayer_od *   status_type;          /*    32     8 */

	/* size: 40, cachelines: 1, members: 5 */
	/* last cacheline: 40 bytes */
};
struct CommunicationReferee_PropertiesTypes {
	CommunicationReferee_properties_ro * trajectoryManager_type; /*     0     8 */
	CommunicationReferee_properties_ro * controller_type; /*     8     8 */
	CommunicationReferee_od *  tcpPort_type;         /*    16     8 */
	CommunicationReferee_od *  connected_type;       /*    24     8 */
	CommunicationReferee_od *  status_type;          /*    32     8 */

	/* size: 40, cachelines: 1, members: 5 */
	/* last cacheline: 40 bytes */
};
struct TrajFromPlayerProvider_PropertiesTypes {

	/* size: 0, cachelines: 0, members: 0 */
};
struct TrajFromPlayerUser_PropertiesTypes {

	/* size: 0, cachelines: 0, members: 0 */
};
struct TrajFromRefereeProvider_PropertiesTypes {

	/* size: 0, cachelines: 0, members: 0 */
};
struct TrajFromRefereeUser_PropertiesTypes {

	/* size: 0, cachelines: 0, members: 0 */
};
struct TrajToPlayerProvider_PropertiesTypes {

	/* size: 0, cachelines: 0, members: 0 */
};
struct TrajToPlayerUser_PropertiesTypes {

	/* size: 0, cachelines: 0, members: 0 */
};
struct TrajToRefereeProvider_PropertiesTypes {

	/* size: 0, cachelines: 0, members: 0 */
};
struct TrajToRefereeUser_PropertiesTypes {

	/* size: 0, cachelines: 0, members: 0 */
};
struct ControllerFromRefereeProvider_PropertiesTypes {

	/* size: 0, cachelines: 0, members: 0 */
};
struct ControllerFromRefereeUser_PropertiesTypes {

	/* size: 0, cachelines: 0, members: 0 */
};
struct RefereeUser_PropertiesTypes {

	/* size: 0, cachelines: 0, members: 0 */
};
struct PlayerUser_PropertiesTypes {

	/* size: 0, cachelines: 0, members: 0 */
};
struct TrajUser_PropertiesTypes {

	/* size: 0, cachelines: 0, members: 0 */
};
struct Obs_classInfo {
	union {
		UML_Class *        type;                 /*           8 */
		const Obs_PropertiesTypes  * properties_types; /*           8 */
	};                                               /*     0     8 */
	Obs_mutability             mutability;           /*     8     1 */

	/* size: 16, cachelines: 1, members: 2 */
	/* padding: 7 */
	/* last cacheline: 16 bytes */
};
struct DirectionObserver_classInfo {
	union {
		UML_Class *        type;                 /*           8 */
		const DirectionObserver_PropertiesTypes  * properties_types; /*           8 */
	};                                               /*     0     8 */
	DirectionObserver_mutability mutability;         /*     8     0 */

	/* size: 8, cachelines: 1, members: 2 */
	/* last cacheline: 8 bytes */
};
struct System_classInfo {
	union {
		UML_Class *        type;                 /*           8 */
		const System_PropertiesTypes  * properties_types; /*           8 */
	};                                               /*     0     8 */
	System_mutability          mutability;           /*     8     1 */

	/* size: 16, cachelines: 1, members: 2 */
	/* padding: 7 */
	/* last cacheline: 16 bytes */
};
struct ControllerToPlayerPortSys_classInfo {
	union {
		UML_Class *        type;                 /*           8 */
		const ControllerToPlayerPortSys_PropertiesTypes  * properties_types; /*           8 */
	};                                               /*     0     8 */
	ControllerToPlayerPortSys_mutability mutability; /*     8     1 */

	/* size: 16, cachelines: 1, members: 2 */
	/* padding: 7 */
	/* last cacheline: 16 bytes */
};
struct ControllerToRefereePortSys_classInfo {
	union {
		UML_Class *        type;                 /*           8 */
		const ControllerToRefereePortSys_PropertiesTypes  * properties_types; /*           8 */
	};                                               /*     0     8 */
	ControllerToRefereePortSys_mutability mutability; /*     8     1 */

	/* size: 16, cachelines: 1, members: 2 */
	/* padding: 7 */
	/* last cacheline: 16 bytes */
};
struct TrajToPlayerPortSys_classInfo {
	union {
		UML_Class *        type;                 /*           8 */
		const TrajToPlayerPortSys_PropertiesTypes  * properties_types; /*           8 */
	};                                               /*     0     8 */
	TrajToPlayerPortSys_mutability mutability;       /*     8     1 */

	/* size: 16, cachelines: 1, members: 2 */
	/* padding: 7 */
	/* last cacheline: 16 bytes */
};
struct TrajToRefereePortSys_classInfo {
	union {
		UML_Class *        type;                 /*           8 */
		const TrajToRefereePortSys_PropertiesTypes  * properties_types; /*           8 */
	};                                               /*     0     8 */
	TrajToRefereePortSys_mutability mutability;      /*     8     1 */

	/* size: 16, cachelines: 1, members: 2 */
	/* padding: 7 */
	/* last cacheline: 16 bytes */
};
struct Controller_classInfo {
	union {
		UML_Class *        type;                 /*           8 */
		const Controller_PropertiesTypes  * properties_types; /*           8 */
	};                                               /*     0     8 */
	Controller_mutability      mutability;           /*     8     1 */

	/* size: 16, cachelines: 1, members: 2 */
	/* padding: 7 */
	/* last cacheline: 16 bytes */
};
struct TrajectoryManager_classInfo {
	union {
		UML_Class *        type;                 /*           8 */
		const TrajectoryManager_PropertiesTypes  * properties_types; /*           8 */
	};                                               /*     0     8 */
	TrajectoryManager_mutability mutability;         /*     8     4 */

	/* size: 16, cachelines: 1, members: 2 */
	/* padding: 4 */
	/* last cacheline: 16 bytes */
};
struct Main_classInfo {
	union {
		UML_Class *        type;                 /*           8 */
		const Main_PropertiesTypes  * properties_types; /*           8 */
	};                                               /*     0     8 */
	Main_mutability            mutability;           /*     8     1 */

	/* size: 16, cachelines: 1, members: 2 */
	/* padding: 7 */
	/* last cacheline: 16 bytes */
};
struct Environment_classInfo {
	union {
		UML_Class *        type;                 /*           8 */
		const Environment_PropertiesTypes  * properties_types; /*           8 */
	};                                               /*     0     8 */
	Environment_mutability     mutability;           /*     8     1 */

	/* size: 16, cachelines: 1, members: 2 */
	/* padding: 7 */
	/* last cacheline: 16 bytes */
};
struct ControllerToPlayerPortEnv_classInfo {
	union {
		UML_Class *        type;                 /*           8 */
		const ControllerToPlayerPortEnv_PropertiesTypes  * properties_types; /*           8 */
	};                                               /*     0     8 */
	ControllerToPlayerPortEnv_mutability mutability; /*     8     1 */

	/* size: 16, cachelines: 1, members: 2 */
	/* padding: 7 */
	/* last cacheline: 16 bytes */
};
struct ControllerToRefereePortEnv_classInfo {
	union {
		UML_Class *        type;                 /*           8 */
		const ControllerToRefereePortEnv_PropertiesTypes  * properties_types; /*           8 */
	};                                               /*     0     8 */
	ControllerToRefereePortEnv_mutability mutability; /*     8     1 */

	/* size: 16, cachelines: 1, members: 2 */
	/* padding: 7 */
	/* last cacheline: 16 bytes */
};
struct TrajToPlayerPortEnv_classInfo {
	union {
		UML_Class *        type;                 /*           8 */
		const TrajToPlayerPortEnv_PropertiesTypes  * properties_types; /*           8 */
	};                                               /*     0     8 */
	TrajToPlayerPortEnv_mutability mutability;       /*     8     1 */

	/* size: 16, cachelines: 1, members: 2 */
	/* padding: 7 */
	/* last cacheline: 16 bytes */
};
struct TrajToRefereePortEnv_classInfo {
	union {
		UML_Class *        type;                 /*           8 */
		const TrajToRefereePortEnv_PropertiesTypes  * properties_types; /*           8 */
	};                                               /*     0     8 */
	TrajToRefereePortEnv_mutability mutability;      /*     8     1 */

	/* size: 16, cachelines: 1, members: 2 */
	/* padding: 7 */
	/* last cacheline: 16 bytes */
};
struct CommunicationPlayer_classInfo {
	union {
		UML_Class *        type;                 /*           8 */
		const CommunicationPlayer_PropertiesTypes  * properties_types; /*           8 */
	};                                               /*     0     8 */
	CommunicationPlayer_mutability mutability;       /*     8     1 */

	/* size: 16, cachelines: 1, members: 2 */
	/* padding: 7 */
	/* last cacheline: 16 bytes */
};
struct CommunicationReferee_classInfo {
	union {
		UML_Class *        type;                 /*           8 */
		const CommunicationReferee_PropertiesTypes  * properties_types; /*           8 */
	};                                               /*     0     8 */
	CommunicationReferee_mutability mutability;      /*     8     1 */

	/* size: 16, cachelines: 1, members: 2 */
	/* padding: 7 */
	/* last cacheline: 16 bytes */
};
struct TrajFromPlayerProvider_classInfo {
	union {
		UML_Class *        type;                 /*           8 */
		const TrajFromPlayerProvider_PropertiesTypes  * properties_types; /*           8 */
	};                                               /*     0     8 */
	TrajFromPlayerProvider_mutability mutability;    /*     8     0 */

	/* size: 8, cachelines: 1, members: 2 */
	/* last cacheline: 8 bytes */
};
struct TrajFromPlayerUser_classInfo {
	union {
		UML_Class *        type;                 /*           8 */
		const TrajFromPlayerUser_PropertiesTypes  * properties_types; /*           8 */
	};                                               /*     0     8 */
	TrajFromPlayerUser_mutability mutability;        /*     8     0 */

	/* size: 8, cachelines: 1, members: 2 */
	/* last cacheline: 8 bytes */
};
struct TrajFromRefereeProvider_classInfo {
	union {
		UML_Class *        type;                 /*           8 */
		const TrajFromRefereeProvider_PropertiesTypes  * properties_types; /*           8 */
	};                                               /*     0     8 */
	TrajFromRefereeProvider_mutability mutability;   /*     8     0 */

	/* size: 8, cachelines: 1, members: 2 */
	/* last cacheline: 8 bytes */
};
struct TrajFromRefereeUser_classInfo {
	union {
		UML_Class *        type;                 /*           8 */
		const TrajFromRefereeUser_PropertiesTypes  * properties_types; /*           8 */
	};                                               /*     0     8 */
	TrajFromRefereeUser_mutability mutability;       /*     8     0 */

	/* size: 8, cachelines: 1, members: 2 */
	/* last cacheline: 8 bytes */
};
struct TrajToPlayerProvider_classInfo {
	union {
		UML_Class *        type;                 /*           8 */
		const TrajToPlayerProvider_PropertiesTypes  * properties_types; /*           8 */
	};                                               /*     0     8 */
	TrajToPlayerProvider_mutability mutability;      /*     8     0 */

	/* size: 8, cachelines: 1, members: 2 */
	/* last cacheline: 8 bytes */
};
struct TrajToPlayerUser_classInfo {
	union {
		UML_Class *        type;                 /*           8 */
		const TrajToPlayerUser_PropertiesTypes  * properties_types; /*           8 */
	};                                               /*     0     8 */
	TrajToPlayerUser_mutability mutability;          /*     8     0 */

	/* size: 8, cachelines: 1, members: 2 */
	/* last cacheline: 8 bytes */
};
struct TrajToRefereeProvider_classInfo {
	union {
		UML_Class *        type;                 /*           8 */
		const TrajToRefereeProvider_PropertiesTypes  * properties_types; /*           8 */
	};                                               /*     0     8 */
	TrajToRefereeProvider_mutability mutability;     /*     8     0 */

	/* size: 8, cachelines: 1, members: 2 */
	/* last cacheline: 8 bytes */
};
struct TrajToRefereeUser_classInfo {
	union {
		UML_Class *        type;                 /*           8 */
		const TrajToRefereeUser_PropertiesTypes  * properties_types; /*           8 */
	};                                               /*     0     8 */
	TrajToRefereeUser_mutability mutability;         /*     8     0 */

	/* size: 8, cachelines: 1, members: 2 */
	/* last cacheline: 8 bytes */
};
struct ControllerFromRefereeProvider_classInfo {
	union {
		UML_Class *        type;                 /*           8 */
		const ControllerFromRefereeProvider_PropertiesTypes  * properties_types; /*           8 */
	};                                               /*     0     8 */
	ControllerFromRefereeProvider_mutability mutability; /*     8     0 */

	/* size: 8, cachelines: 1, members: 2 */
	/* last cacheline: 8 bytes */
};
struct ControllerFromRefereeUser_classInfo {
	union {
		UML_Class *        type;                 /*           8 */
		const ControllerFromRefereeUser_PropertiesTypes  * properties_types; /*           8 */
	};                                               /*     0     8 */
	ControllerFromRefereeUser_mutability mutability; /*     8     0 */

	/* size: 8, cachelines: 1, members: 2 */
	/* last cacheline: 8 bytes */
};
struct RefereeUser_classInfo {
	union {
		UML_Class *        type;                 /*           8 */
		const RefereeUser_PropertiesTypes  * properties_types; /*           8 */
	};                                               /*     0     8 */
	RefereeUser_mutability     mutability;           /*     8     0 */

	/* size: 8, cachelines: 1, members: 2 */
	/* last cacheline: 8 bytes */
};
struct PlayerUser_classInfo {
	union {
		UML_Class *        type;                 /*           8 */
		const PlayerUser_PropertiesTypes  * properties_types; /*           8 */
	};                                               /*     0     8 */
	PlayerUser_mutability      mutability;           /*     8     0 */

	/* size: 8, cachelines: 1, members: 2 */
	/* last cacheline: 8 bytes */
};
struct TrajUser_classInfo {
	union {
		UML_Class *        type;                 /*           8 */
		const TrajUser_PropertiesTypes  * properties_types; /*           8 */
	};                                               /*     0     8 */
	TrajUser_mutability        mutability;           /*     8     0 */

	/* size: 8, cachelines: 1, members: 2 */
	/* last cacheline: 8 bytes */
};
struct DirectionObserver_Object {
	char *                     name;                 /*     0     8 */
	DirectionObserver_classInfo * classInfo;         /*     8     8 */
	UML_Property *             part;                 /*    16     8 */
	DirectionObserver_properties_ro * properties_ro; /*    24     8 */
	NbPropertiesRO_t           nb_properties_ro;     /*    32     1 */

	/* XXX 7 bytes hole, try to pack */

	DirectionObserver_store *  store;                /*    40     8 */
	DirectionObserver_operations * operations;       /*    48     8 */
	ObjectMultiplicity_t       multiplicity_id;      /*    56     1 */

	/* XXX 7 bytes hole, try to pack */

	/* --- cacheline 1 boundary (64 bytes) --- */
	void *                     instance;             /*    64     8 */
	uint32_t                   instanceSize;         /*    72     4 */

	/* XXX 4 bytes hole, try to pack */

	DirectionObserver_od *     properties_rw;        /*    80     8 */
	UML_StateMachine *         stateMachine;         /*    88     8 */
	uint32_t                   eventParamsSize;      /*    96     4 */

	/* XXX 4 bytes hole, try to pack */

	EventPool *                eventPool;            /*   104     8 */
	void *                     reorganize_buffer;    /*   112     8 */
	NbOutgoings_t *            fireables;            /*   120     8 */
	/* --- cacheline 2 boundary (128 bytes) --- */
	NbFireables_t              nbFireables;          /*   128     1 */
	NbOutgoings_t              maxOutgoings;         /*   129     1 */
	NbFireables_t              fireablesMax;         /*   130     1 */
	FireablesLength_t          fireablesLength;      /*   131     1 */

	/* XXX 4 bytes hole, try to pack */

	uint32_t *                 store_cs;             /*   136     8 */
	void *                     store_ep_params;      /*   144     8 */
	_Bool                      in_environment;       /*   152     1 */

	/* size: 160, cachelines: 3, members: 23 */
	/* sum members: 127, holes: 5, sum holes: 26 */
	/* padding: 7 */
	/* last cacheline: 32 bytes */
};
struct Controller_Object {
	char *                     name;                 /*     0     8 */
	Controller_classInfo *     classInfo;            /*     8     8 */
	UML_Property *             part;                 /*    16     8 */
	Controller_properties_ro * properties_ro;        /*    24     8 */
	NbPropertiesRO_t           nb_properties_ro;     /*    32     1 */

	/* XXX 7 bytes hole, try to pack */

	Controller_store *         store;                /*    40     8 */
	Controller_operations *    operations;           /*    48     8 */
	ObjectMultiplicity_t       multiplicity_id;      /*    56     1 */

	/* XXX 7 bytes hole, try to pack */

	/* --- cacheline 1 boundary (64 bytes) --- */
	void *                     instance;             /*    64     8 */
	uint32_t                   instanceSize;         /*    72     4 */

	/* XXX 4 bytes hole, try to pack */

	Controller_od *            properties_rw;        /*    80     8 */
	UML_StateMachine *         stateMachine;         /*    88     8 */
	uint32_t                   eventParamsSize;      /*    96     4 */

	/* XXX 4 bytes hole, try to pack */

	EventPool *                eventPool;            /*   104     8 */
	void *                     reorganize_buffer;    /*   112     8 */
	NbOutgoings_t *            fireables;            /*   120     8 */
	/* --- cacheline 2 boundary (128 bytes) --- */
	NbFireables_t              nbFireables;          /*   128     1 */
	NbOutgoings_t              maxOutgoings;         /*   129     1 */
	NbFireables_t              fireablesMax;         /*   130     1 */
	FireablesLength_t          fireablesLength;      /*   131     1 */

	/* XXX 4 bytes hole, try to pack */

	uint32_t *                 store_cs;             /*   136     8 */
	void *                     store_ep_params;      /*   144     8 */
	_Bool                      in_environment;       /*   152     1 */

	/* size: 160, cachelines: 3, members: 23 */
	/* sum members: 127, holes: 5, sum holes: 26 */
	/* padding: 7 */
	/* last cacheline: 32 bytes */
};
struct TrajectoryManager_Object {
	char *                     name;                 /*     0     8 */
	TrajectoryManager_classInfo * classInfo;         /*     8     8 */
	UML_Property *             part;                 /*    16     8 */
	TrajectoryManager_properties_ro * properties_ro; /*    24     8 */
	NbPropertiesRO_t           nb_properties_ro;     /*    32     1 */

	/* XXX 7 bytes hole, try to pack */

	TrajectoryManager_store *  store;                /*    40     8 */
	TrajectoryManager_operations * operations;       /*    48     8 */
	ObjectMultiplicity_t       multiplicity_id;      /*    56     1 */

	/* XXX 7 bytes hole, try to pack */

	/* --- cacheline 1 boundary (64 bytes) --- */
	void *                     instance;             /*    64     8 */
	uint32_t                   instanceSize;         /*    72     4 */

	/* XXX 4 bytes hole, try to pack */

	TrajectoryManager_od *     properties_rw;        /*    80     8 */
	UML_StateMachine *         stateMachine;         /*    88     8 */
	uint32_t                   eventParamsSize;      /*    96     4 */

	/* XXX 4 bytes hole, try to pack */

	EventPool *                eventPool;            /*   104     8 */
	void *                     reorganize_buffer;    /*   112     8 */
	NbOutgoings_t *            fireables;            /*   120     8 */
	/* --- cacheline 2 boundary (128 bytes) --- */
	NbFireables_t              nbFireables;          /*   128     1 */
	NbOutgoings_t              maxOutgoings;         /*   129     1 */
	NbFireables_t              fireablesMax;         /*   130     1 */
	FireablesLength_t          fireablesLength;      /*   131     1 */

	/* XXX 4 bytes hole, try to pack */

	uint32_t *                 store_cs;             /*   136     8 */
	void *                     store_ep_params;      /*   144     8 */
	_Bool                      in_environment;       /*   152     1 */

	/* size: 160, cachelines: 3, members: 23 */
	/* sum members: 127, holes: 5, sum holes: 26 */
	/* padding: 7 */
	/* last cacheline: 32 bytes */
};
struct CommunicationPlayer_Object {
	char *                     name;                 /*     0     8 */
	CommunicationPlayer_classInfo * classInfo;       /*     8     8 */
	UML_Property *             part;                 /*    16     8 */
	CommunicationPlayer_properties_ro * properties_ro; /*    24     8 */
	NbPropertiesRO_t           nb_properties_ro;     /*    32     1 */

	/* XXX 7 bytes hole, try to pack */

	CommunicationPlayer_store * store;               /*    40     8 */
	CommunicationPlayer_operations * operations;     /*    48     8 */
	ObjectMultiplicity_t       multiplicity_id;      /*    56     1 */

	/* XXX 7 bytes hole, try to pack */

	/* --- cacheline 1 boundary (64 bytes) --- */
	void *                     instance;             /*    64     8 */
	uint32_t                   instanceSize;         /*    72     4 */

	/* XXX 4 bytes hole, try to pack */

	CommunicationPlayer_od *   properties_rw;        /*    80     8 */
	UML_StateMachine *         stateMachine;         /*    88     8 */
	uint32_t                   eventParamsSize;      /*    96     4 */

	/* XXX 4 bytes hole, try to pack */

	EventPool *                eventPool;            /*   104     8 */
	void *                     reorganize_buffer;    /*   112     8 */
	NbOutgoings_t *            fireables;            /*   120     8 */
	/* --- cacheline 2 boundary (128 bytes) --- */
	NbFireables_t              nbFireables;          /*   128     1 */
	NbOutgoings_t              maxOutgoings;         /*   129     1 */
	NbFireables_t              fireablesMax;         /*   130     1 */
	FireablesLength_t          fireablesLength;      /*   131     1 */

	/* XXX 4 bytes hole, try to pack */

	uint32_t *                 store_cs;             /*   136     8 */
	void *                     store_ep_params;      /*   144     8 */
	_Bool                      in_environment;       /*   152     1 */

	/* size: 160, cachelines: 3, members: 23 */
	/* sum members: 127, holes: 5, sum holes: 26 */
	/* padding: 7 */
	/* last cacheline: 32 bytes */
};
struct CommunicationReferee_Object {
	char *                     name;                 /*     0     8 */
	CommunicationReferee_classInfo * classInfo;      /*     8     8 */
	UML_Property *             part;                 /*    16     8 */
	CommunicationReferee_properties_ro * properties_ro; /*    24     8 */
	NbPropertiesRO_t           nb_properties_ro;     /*    32     1 */

	/* XXX 7 bytes hole, try to pack */

	CommunicationReferee_store * store;              /*    40     8 */
	CommunicationReferee_operations * operations;    /*    48     8 */
	ObjectMultiplicity_t       multiplicity_id;      /*    56     1 */

	/* XXX 7 bytes hole, try to pack */

	/* --- cacheline 1 boundary (64 bytes) --- */
	void *                     instance;             /*    64     8 */
	uint32_t                   instanceSize;         /*    72     4 */

	/* XXX 4 bytes hole, try to pack */

	CommunicationReferee_od *  properties_rw;        /*    80     8 */
	UML_StateMachine *         stateMachine;         /*    88     8 */
	uint32_t                   eventParamsSize;      /*    96     4 */

	/* XXX 4 bytes hole, try to pack */

	EventPool *                eventPool;            /*   104     8 */
	void *                     reorganize_buffer;    /*   112     8 */
	NbOutgoings_t *            fireables;            /*   120     8 */
	/* --- cacheline 2 boundary (128 bytes) --- */
	NbFireables_t              nbFireables;          /*   128     1 */
	NbOutgoings_t              maxOutgoings;         /*   129     1 */
	NbFireables_t              fireablesMax;         /*   130     1 */
	FireablesLength_t          fireablesLength;      /*   131     1 */

	/* XXX 4 bytes hole, try to pack */

	uint32_t *                 store_cs;             /*   136     8 */
	void *                     store_ep_params;      /*   144     8 */
	_Bool                      in_environment;       /*   152     1 */

	/* size: 160, cachelines: 3, members: 23 */
	/* sum members: 127, holes: 5, sum holes: 26 */
	/* padding: 7 */
	/* last cacheline: 32 bytes */
};
struct ActiveObjects {
	Controller_Object *        instMain_system_controller; /*     0     8 */
	TrajectoryManager_Object * instMain_system_trajectoryManager; /*     8     8 */
	CommunicationPlayer_Object * instMain_environment_player; /*    16     8 */
	CommunicationReferee_Object * instMain_environment_referee; /*    24     8 */

	/* size: 32, cachelines: 1, members: 4 */
	/* last cacheline: 32 bytes */
};
struct System_Object {
	char *                     name;                 /*     0     8 */
	System_classInfo *         classInfo;            /*     8     8 */
	UML_Property *             part;                 /*    16     8 */
	System_properties_ro *     properties_ro;        /*    24     8 */
	NbPropertiesRO_t           nb_properties_ro;     /*    32     1 */

	/* XXX 7 bytes hole, try to pack */

	System_store *             store;                /*    40     8 */
	System_operations *        operations;           /*    48     8 */
	ObjectMultiplicity_t       multiplicity_id;      /*    56     1 */

	/* XXX 7 bytes hole, try to pack */

	/* --- cacheline 1 boundary (64 bytes) --- */
	void *                     instance;             /*    64     8 */
	uint32_t                   instanceSize;         /*    72     4 */

	/* XXX 4 bytes hole, try to pack */

	System_od *                properties_rw;        /*    80     8 */

	/* size: 88, cachelines: 2, members: 11 */
	/* sum members: 70, holes: 3, sum holes: 18 */
	/* last cacheline: 24 bytes */
};
struct ControllerToPlayerPortSys_Object {
	char *                     name;                 /*     0     8 */
	ControllerToPlayerPortSys_classInfo * classInfo; /*     8     8 */
	UML_Property *             part;                 /*    16     8 */
	ControllerToPlayerPortSys_properties_ro * properties_ro; /*    24     8 */
	NbPropertiesRO_t           nb_properties_ro;     /*    32     1 */

	/* XXX 7 bytes hole, try to pack */

	ControllerToPlayerPortSys_store * store;         /*    40     8 */
	ControllerToPlayerPortSys_operations * operations; /*    48     8 */
	ObjectMultiplicity_t       multiplicity_id;      /*    56     1 */

	/* XXX 7 bytes hole, try to pack */

	/* --- cacheline 1 boundary (64 bytes) --- */
	void *                     instance;             /*    64     8 */
	uint32_t                   instanceSize;         /*    72     4 */

	/* XXX 4 bytes hole, try to pack */

	ControllerToPlayerPortSys_od * properties_rw;    /*    80     8 */

	/* size: 88, cachelines: 2, members: 11 */
	/* sum members: 70, holes: 3, sum holes: 18 */
	/* last cacheline: 24 bytes */
};
struct ControllerToRefereePortSys_Object {
	char *                     name;                 /*     0     8 */
	ControllerToRefereePortSys_classInfo * classInfo; /*     8     8 */
	UML_Property *             part;                 /*    16     8 */
	ControllerToRefereePortSys_properties_ro * properties_ro; /*    24     8 */
	NbPropertiesRO_t           nb_properties_ro;     /*    32     1 */

	/* XXX 7 bytes hole, try to pack */

	ControllerToRefereePortSys_store * store;        /*    40     8 */
	ControllerToRefereePortSys_operations * operations; /*    48     8 */
	ObjectMultiplicity_t       multiplicity_id;      /*    56     1 */

	/* XXX 7 bytes hole, try to pack */

	/* --- cacheline 1 boundary (64 bytes) --- */
	void *                     instance;             /*    64     8 */
	uint32_t                   instanceSize;         /*    72     4 */

	/* XXX 4 bytes hole, try to pack */

	ControllerToRefereePortSys_od * properties_rw;   /*    80     8 */

	/* size: 88, cachelines: 2, members: 11 */
	/* sum members: 70, holes: 3, sum holes: 18 */
	/* last cacheline: 24 bytes */
};
struct TrajToPlayerPortSys_Object {
	char *                     name;                 /*     0     8 */
	TrajToPlayerPortSys_classInfo * classInfo;       /*     8     8 */
	UML_Property *             part;                 /*    16     8 */
	TrajToPlayerPortSys_properties_ro * properties_ro; /*    24     8 */
	NbPropertiesRO_t           nb_properties_ro;     /*    32     1 */

	/* XXX 7 bytes hole, try to pack */

	TrajToPlayerPortSys_store * store;               /*    40     8 */
	TrajToPlayerPortSys_operations * operations;     /*    48     8 */
	ObjectMultiplicity_t       multiplicity_id;      /*    56     1 */

	/* XXX 7 bytes hole, try to pack */

	/* --- cacheline 1 boundary (64 bytes) --- */
	void *                     instance;             /*    64     8 */
	uint32_t                   instanceSize;         /*    72     4 */

	/* XXX 4 bytes hole, try to pack */

	TrajToPlayerPortSys_od *   properties_rw;        /*    80     8 */

	/* size: 88, cachelines: 2, members: 11 */
	/* sum members: 70, holes: 3, sum holes: 18 */
	/* last cacheline: 24 bytes */
};
struct TrajToRefereePortSys_Object {
	char *                     name;                 /*     0     8 */
	TrajToRefereePortSys_classInfo * classInfo;      /*     8     8 */
	UML_Property *             part;                 /*    16     8 */
	TrajToRefereePortSys_properties_ro * properties_ro; /*    24     8 */
	NbPropertiesRO_t           nb_properties_ro;     /*    32     1 */

	/* XXX 7 bytes hole, try to pack */

	TrajToRefereePortSys_store * store;              /*    40     8 */
	TrajToRefereePortSys_operations * operations;    /*    48     8 */
	ObjectMultiplicity_t       multiplicity_id;      /*    56     1 */

	/* XXX 7 bytes hole, try to pack */

	/* --- cacheline 1 boundary (64 bytes) --- */
	void *                     instance;             /*    64     8 */
	uint32_t                   instanceSize;         /*    72     4 */

	/* XXX 4 bytes hole, try to pack */

	TrajToRefereePortSys_od *  properties_rw;        /*    80     8 */

	/* size: 88, cachelines: 2, members: 11 */
	/* sum members: 70, holes: 3, sum holes: 18 */
	/* last cacheline: 24 bytes */
};
struct Main_Object {
	char *                     name;                 /*     0     8 */
	Main_classInfo *           classInfo;            /*     8     8 */
	UML_Property *             part;                 /*    16     8 */
	Main_properties_ro *       properties_ro;        /*    24     8 */
	NbPropertiesRO_t           nb_properties_ro;     /*    32     1 */

	/* XXX 7 bytes hole, try to pack */

	Main_store *               store;                /*    40     8 */
	Main_operations *          operations;           /*    48     8 */
	ObjectMultiplicity_t       multiplicity_id;      /*    56     1 */

	/* XXX 7 bytes hole, try to pack */

	/* --- cacheline 1 boundary (64 bytes) --- */
	void *                     instance;             /*    64     8 */
	uint32_t                   instanceSize;         /*    72     4 */

	/* XXX 4 bytes hole, try to pack */

	Main_od *                  properties_rw;        /*    80     8 */

	/* size: 88, cachelines: 2, members: 11 */
	/* sum members: 70, holes: 3, sum holes: 18 */
	/* last cacheline: 24 bytes */
};
struct Environment_Object {
	char *                     name;                 /*     0     8 */
	Environment_classInfo *    classInfo;            /*     8     8 */
	UML_Property *             part;                 /*    16     8 */
	Environment_properties_ro * properties_ro;       /*    24     8 */
	NbPropertiesRO_t           nb_properties_ro;     /*    32     1 */

	/* XXX 7 bytes hole, try to pack */

	Environment_store *        store;                /*    40     8 */
	Environment_operations *   operations;           /*    48     8 */
	ObjectMultiplicity_t       multiplicity_id;      /*    56     1 */

	/* XXX 7 bytes hole, try to pack */

	/* --- cacheline 1 boundary (64 bytes) --- */
	void *                     instance;             /*    64     8 */
	uint32_t                   instanceSize;         /*    72     4 */

	/* XXX 4 bytes hole, try to pack */

	Environment_od *           properties_rw;        /*    80     8 */

	/* size: 88, cachelines: 2, members: 11 */
	/* sum members: 70, holes: 3, sum holes: 18 */
	/* last cacheline: 24 bytes */
};
struct ControllerToPlayerPortEnv_Object {
	char *                     name;                 /*     0     8 */
	ControllerToPlayerPortEnv_classInfo * classInfo; /*     8     8 */
	UML_Property *             part;                 /*    16     8 */
	ControllerToPlayerPortEnv_properties_ro * properties_ro; /*    24     8 */
	NbPropertiesRO_t           nb_properties_ro;     /*    32     1 */

	/* XXX 7 bytes hole, try to pack */

	ControllerToPlayerPortEnv_store * store;         /*    40     8 */
	ControllerToPlayerPortEnv_operations * operations; /*    48     8 */
	ObjectMultiplicity_t       multiplicity_id;      /*    56     1 */

	/* XXX 7 bytes hole, try to pack */

	/* --- cacheline 1 boundary (64 bytes) --- */
	void *                     instance;             /*    64     8 */
	uint32_t                   instanceSize;         /*    72     4 */

	/* XXX 4 bytes hole, try to pack */

	ControllerToPlayerPortEnv_od * properties_rw;    /*    80     8 */

	/* size: 88, cachelines: 2, members: 11 */
	/* sum members: 70, holes: 3, sum holes: 18 */
	/* last cacheline: 24 bytes */
};
struct ControllerToRefereePortEnv_Object {
	char *                     name;                 /*     0     8 */
	ControllerToRefereePortEnv_classInfo * classInfo; /*     8     8 */
	UML_Property *             part;                 /*    16     8 */
	ControllerToRefereePortEnv_properties_ro * properties_ro; /*    24     8 */
	NbPropertiesRO_t           nb_properties_ro;     /*    32     1 */

	/* XXX 7 bytes hole, try to pack */

	ControllerToRefereePortEnv_store * store;        /*    40     8 */
	ControllerToRefereePortEnv_operations * operations; /*    48     8 */
	ObjectMultiplicity_t       multiplicity_id;      /*    56     1 */

	/* XXX 7 bytes hole, try to pack */

	/* --- cacheline 1 boundary (64 bytes) --- */
	void *                     instance;             /*    64     8 */
	uint32_t                   instanceSize;         /*    72     4 */

	/* XXX 4 bytes hole, try to pack */

	ControllerToRefereePortEnv_od * properties_rw;   /*    80     8 */

	/* size: 88, cachelines: 2, members: 11 */
	/* sum members: 70, holes: 3, sum holes: 18 */
	/* last cacheline: 24 bytes */
};
struct TrajToPlayerPortEnv_Object {
	char *                     name;                 /*     0     8 */
	TrajToPlayerPortEnv_classInfo * classInfo;       /*     8     8 */
	UML_Property *             part;                 /*    16     8 */
	TrajToPlayerPortEnv_properties_ro * properties_ro; /*    24     8 */
	NbPropertiesRO_t           nb_properties_ro;     /*    32     1 */

	/* XXX 7 bytes hole, try to pack */

	TrajToPlayerPortEnv_store * store;               /*    40     8 */
	TrajToPlayerPortEnv_operations * operations;     /*    48     8 */
	ObjectMultiplicity_t       multiplicity_id;      /*    56     1 */

	/* XXX 7 bytes hole, try to pack */

	/* --- cacheline 1 boundary (64 bytes) --- */
	void *                     instance;             /*    64     8 */
	uint32_t                   instanceSize;         /*    72     4 */

	/* XXX 4 bytes hole, try to pack */

	TrajToPlayerPortEnv_od *   properties_rw;        /*    80     8 */

	/* size: 88, cachelines: 2, members: 11 */
	/* sum members: 70, holes: 3, sum holes: 18 */
	/* last cacheline: 24 bytes */
};
struct TrajToRefereePortEnv_Object {
	char *                     name;                 /*     0     8 */
	TrajToRefereePortEnv_classInfo * classInfo;      /*     8     8 */
	UML_Property *             part;                 /*    16     8 */
	TrajToRefereePortEnv_properties_ro * properties_ro; /*    24     8 */
	NbPropertiesRO_t           nb_properties_ro;     /*    32     1 */

	/* XXX 7 bytes hole, try to pack */

	TrajToRefereePortEnv_store * store;              /*    40     8 */
	TrajToRefereePortEnv_operations * operations;    /*    48     8 */
	ObjectMultiplicity_t       multiplicity_id;      /*    56     1 */

	/* XXX 7 bytes hole, try to pack */

	/* --- cacheline 1 boundary (64 bytes) --- */
	void *                     instance;             /*    64     8 */
	uint32_t                   instanceSize;         /*    72     4 */

	/* XXX 4 bytes hole, try to pack */

	TrajToRefereePortEnv_od *  properties_rw;        /*    80     8 */

	/* size: 88, cachelines: 2, members: 11 */
	/* sum members: 70, holes: 3, sum holes: 18 */
	/* last cacheline: 24 bytes */
};
struct PassiveObjects {
	Main_Object *              instMain;             /*     0     8 */
	System_Object *            instMain_system;      /*     8     8 */
	ControllerToPlayerPortSys_Object * instMain_system_controllerToPlayerPortSys; /*    16     8 */
	ControllerToRefereePortSys_Object * instMain_system_controllerToRefereePortSys; /*    24     8 */
	TrajToPlayerPortSys_Object * instMain_system_trajToPlayerPortSys; /*    32     8 */
	TrajToRefereePortSys_Object * instMain_system_trajToRefereePortSys; /*    40     8 */
	Environment_Object *       instMain_environment; /*    48     8 */
	ControllerToPlayerPortEnv_Object * instMain_environment_controllerToPlayerPortEnv; /*    56     8 */
	/* --- cacheline 1 boundary (64 bytes) --- */
	ControllerToRefereePortEnv_Object * instMain_environment_controllerToRefereePortEnv; /*    64     8 */
	TrajToPlayerPortEnv_Object * instMain_environment_trajToPlayerPortEnv; /*    72     8 */
	TrajToRefereePortEnv_Object * instMain_environment_trajToRefereePortEnv; /*    80     8 */

	/* size: 88, cachelines: 2, members: 11 */
	/* last cacheline: 24 bytes */
};
struct TrajToRefereePortEnv_operations {

	/* size: 0, cachelines: 0, members: 0 */
};
struct ControllerToPlayerPortSys_operations {

	/* size: 0, cachelines: 0, members: 0 */
};
struct TrajToPlayerPortSys_operations {

	/* size: 0, cachelines: 0, members: 0 */
};
struct Main_operations {

	/* size: 0, cachelines: 0, members: 0 */
};
struct Controller_operations {

	/* size: 0, cachelines: 0, members: 0 */
};
struct TrajectoryManager_operations {

	/* size: 0, cachelines: 0, members: 0 */
};
struct DirectionObserver_operations {

	/* size: 0, cachelines: 0, members: 0 */
};
struct ControllerToRefereePortEnv_operations {

	/* size: 0, cachelines: 0, members: 0 */
};
struct CommunicationReferee_operations {

	/* size: 0, cachelines: 0, members: 0 */
};
struct ControllerToRefereePortSys_operations {

	/* size: 0, cachelines: 0, members: 0 */
};
struct TrajToPlayerPortEnv_operations {

	/* size: 0, cachelines: 0, members: 0 */
};
struct ControllerToPlayerPortEnv_operations {

	/* size: 0, cachelines: 0, members: 0 */
};
struct CommunicationPlayer_operations {

	/* size: 0, cachelines: 0, members: 0 */
};
struct TrajToRefereePortSys_operations {

	/* size: 0, cachelines: 0, members: 0 */
};
struct Environment_operations {

	/* size: 0, cachelines: 0, members: 0 */
};
struct System_operations {

	/* size: 0, cachelines: 0, members: 0 */
};
struct Ports {
	UML_Port *                 ChallengeSystem__POINT__System__POINT__controllerToPlayerPortSys; /*     0     8 */
	UML_Port *                 ChallengeSystem__POINT__System__POINT__controllerToRefereePortSys; /*     8     8 */
	UML_Port *                 ChallengeSystem__POINT__System__POINT__trajToPlayerPortSys; /*    16     8 */
	UML_Port *                 ChallengeSystem__POINT__System__POINT__trajToRefereePortSys; /*    24     8 */
	UML_Port *                 ChallengeEnv__POINT__Environment__POINT__controllerToPlayerPortEnv; /*    32     8 */
	UML_Port *                 ChallengeEnv__POINT__Environment__POINT__controllerToRefereePortEnv; /*    40     8 */
	UML_Port *                 ChallengeEnv__POINT__Environment__POINT__trajToPlayerPortEnv; /*    48     8 */
	UML_Port *                 ChallengeEnv__POINT__Environment__POINT__trajToRefereePortEnv; /*    56     8 */
	/* --- cacheline 1 boundary (64 bytes) --- */

	/* size: 64, cachelines: 1, members: 8 */
};
struct Interpreter {
	InterpreterMode            status;               /*     0     4 */

	/* XXX 4 bytes hole, try to pack */

	ActiveObject * *           activeObjects;        /*     8     8 */
	NbActiveObjects_t          offsetActiveObjectsId; /*    16     1 */
	NbActiveObjects_t          nbActiveObjects;      /*    17     1 */

	/* XXX 6 bytes hole, try to pack */

	PassiveObject * *          passiveObjects;       /*    24     8 */
	NbPassiveObjects_t         nbPassiveObjects;     /*    32     1 */

	/* XXX 7 bytes hole, try to pack */

	void *                     store;                /*    40     8 */
	StoreSize_t                storeSize;            /*    48     2 */

	/* size: 56, cachelines: 1, members: 8 */
	/* sum members: 33, holes: 3, sum holes: 17 */
	/* padding: 6 */
	/* last cacheline: 56 bytes */
};
